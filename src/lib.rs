/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]
pub enum impl_info_tag { }
pub type MEX_impl_info = *mut impl_info_tag;
pub type uintptr_t = usize;
pub type va_list = *mut ::std::os::raw::c_char;
pub type size_t = usize;
pub type ptrdiff_t = isize;
pub type intptr_t = isize;
pub type __vcrt_bool = u8;
pub type wchar_t = ::std::os::raw::c_ushort;
pub type __crt_bool = u8;
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
impl ::std::default::Default for __crt_locale_data_public {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum __crt_locale_data { }
pub enum __crt_multibyte_data { }
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
impl ::std::default::Default for __crt_locale_pointers {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
impl ::std::default::Default for _Mbstatet {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = size_t;
pub type _onexit_t =
    ::std::option::Option<extern "C" fn() -> ::std::os::raw::c_int>;
pub type _purecall_handler = ::std::option::Option<extern "C" fn()>;
pub type _invalid_parameter_handler =
    ::std::option::Option<unsafe extern "C" fn(arg1: *const wchar_t,
                                               arg2: *const wchar_t,
                                               arg3: *const wchar_t,
                                               arg4: ::std::os::raw::c_uint,
                                               arg5: uintptr_t)>;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
impl ::std::default::Default for _div_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type div_t = _div_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
impl ::std::default::Default for _ldiv_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ldiv_t = _ldiv_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
impl ::std::default::Default for _lldiv_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type lldiv_t = _lldiv_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _LDOUBLE {
    pub ld: [::std::os::raw::c_uchar; 10usize],
}
impl ::std::default::Default for _LDOUBLE {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _CRT_DOUBLE {
    pub x: f64,
}
impl ::std::default::Default for _CRT_DOUBLE {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _CRT_FLOAT {
    pub f: f32,
}
impl ::std::default::Default for _CRT_FLOAT {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _LONGDOUBLE {
    pub x: f64,
}
impl ::std::default::Default for _LONGDOUBLE {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _LDBL12 {
    pub ld12: [::std::os::raw::c_uchar; 12usize],
}
impl ::std::default::Default for _LDBL12 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type uchar_T = ::std::os::raw::c_uchar;
pub type ushort_T = ::std::os::raw::c_ushort;
pub type ulong_T = ::std::os::raw::c_ulong;
pub type ulonglong_T = ::std::os::raw::c_ulonglong;
pub type int8_T = ::std::os::raw::c_char;
pub type uint8_T = ::std::os::raw::c_uchar;
pub type int16_T = ::std::os::raw::c_short;
pub type uint16_T = ::std::os::raw::c_ushort;
pub type int32_T = ::std::os::raw::c_int;
pub type uint32_T = ::std::os::raw::c_uint;
pub type real32_T = f32;
pub type real64_T = f64;
pub type int64_T = ::std::os::raw::c_long;
pub type uint64_T = ::std::os::raw::c_ulong;
pub type real_T = real64_T;
pub type time_T = real_T;
pub type boolean_T = ::std::os::raw::c_uchar;
pub type char_T = ::std::os::raw::c_char;
pub type int_T = ::std::os::raw::c_int;
pub type uint_T = ::std::os::raw::c_uint;
pub type byte_T = ::std::os::raw::c_uchar;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct creal32_T {
    pub re: real32_T,
    pub im: real32_T,
}
impl ::std::default::Default for creal32_T {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct creal64_T {
    pub re: real64_T,
    pub im: real64_T,
}
impl ::std::default::Default for creal64_T {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct creal_T {
    pub re: real_T,
    pub im: real_T,
}
impl ::std::default::Default for creal_T {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cint8_T {
    pub re: int8_T,
    pub im: int8_T,
}
impl ::std::default::Default for cint8_T {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cuint8_T {
    pub re: uint8_T,
    pub im: uint8_T,
}
impl ::std::default::Default for cuint8_T {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cint16_T {
    pub re: int16_T,
    pub im: int16_T,
}
impl ::std::default::Default for cint16_T {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cuint16_T {
    pub re: uint16_T,
    pub im: uint16_T,
}
impl ::std::default::Default for cuint16_T {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cint32_T {
    pub re: int32_T,
    pub im: int32_T,
}
impl ::std::default::Default for cint32_T {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cuint32_T {
    pub re: uint32_T,
    pub im: uint32_T,
}
impl ::std::default::Default for cuint32_T {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cint64_T {
    pub re: int64_T,
    pub im: int64_T,
}
impl ::std::default::Default for cint64_T {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cuint64_T {
    pub re: uint64_T,
    pub im: uint64_T,
}
impl ::std::default::Default for cuint64_T {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type bool_ = boolean_T;
pub type mwSize = ::std::os::raw::c_int;
pub type mwIndex = ::std::os::raw::c_int;
pub type mwSignedIndex = ::std::os::raw::c_int;
pub type CHAR16_T = wchar_t;
pub enum mxArray_tag { }
pub type mxArray = mxArray_tag;
pub type mxFunctionPtr =
    ::std::option::Option<extern "C" fn(nlhs: ::std::os::raw::c_int,
                                        plhs: *mut *mut mxArray,
                                        nrhs: ::std::os::raw::c_int,
                                        prhs: *mut *mut mxArray)>;
pub type mxLogical = bool_;
pub type mxChar = CHAR16_T;
pub const mxINDEX_CLASS: mxClassID = mxClassID::mxUINT64_CLASS;
pub const mxSPARSE_CLASS: mxClassID = mxClassID::mxVOID_CLASS;
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum mxClassID {
    mxUNKNOWN_CLASS = 0,
    mxCELL_CLASS = 1,
    mxSTRUCT_CLASS = 2,
    mxLOGICAL_CLASS = 3,
    mxCHAR_CLASS = 4,
    mxVOID_CLASS = 5,
    mxDOUBLE_CLASS = 6,
    mxSINGLE_CLASS = 7,
    mxINT8_CLASS = 8,
    mxUINT8_CLASS = 9,
    mxINT16_CLASS = 10,
    mxUINT16_CLASS = 11,
    mxINT32_CLASS = 12,
    mxUINT32_CLASS = 13,
    mxINT64_CLASS = 14,
    mxUINT64_CLASS = 15,
    mxFUNCTION_CLASS = 16,
    mxOPAQUE_CLASS = 17,
    mxOBJECT_CLASS = 18,
}
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum mxComplexity { mxREAL = 0, mxCOMPLEX = 1, }
pub type mex_exit_fn = ::std::option::Option<extern "C" fn()>;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mexGlobalTableEntry_Tag {
    pub name: *const ::std::os::raw::c_char,
    pub variable: *mut *mut mxArray,
}
impl ::std::default::Default for mexGlobalTableEntry_Tag {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mexGlobalTableEntry = mexGlobalTableEntry_Tag;
pub type mexGlobalTable = *mut mexGlobalTableEntry_Tag;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mexFunctionTableEntry_tag {
    pub name: *const ::std::os::raw::c_char,
    pub f: mxFunctionPtr,
    pub nargin: ::std::os::raw::c_int,
    pub nargout: ::std::os::raw::c_int,
    pub local_function_table: *mut _mexLocalFunctionTable,
}
impl ::std::default::Default for mexFunctionTableEntry_tag {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mexFunctionTableEntry = mexFunctionTableEntry_tag;
pub type mexFunctionTable = *mut mexFunctionTableEntry_tag;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _mexLocalFunctionTable {
    pub length: size_t,
    pub entries: mexFunctionTable,
}
impl ::std::default::Default for _mexLocalFunctionTable {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mexLocalFunctionTable = *mut _mexLocalFunctionTable;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _mexInitTermTableEntry {
    pub initialize: ::std::option::Option<extern "C" fn()>,
    pub terminate: ::std::option::Option<extern "C" fn()>,
}
impl ::std::default::Default for _mexInitTermTableEntry {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mexInitTermTableEntry = *mut _mexInitTermTableEntry;
pub type fn_clean_up_after_error = ::std::option::Option<extern "C" fn()>;
pub type fn_simple_function_to_string =
    ::std::option::Option<extern "C" fn(f: mxFunctionPtr)
                              -> *const ::std::os::raw::c_char>;
pub type fn_mex_get_local_function_table =
    ::std::option::Option<extern "C" fn() -> mexLocalFunctionTable>;
pub type fn_mex_set_local_function_table =
    ::std::option::Option<extern "C" fn(arg1: mexLocalFunctionTable)
                              -> mexLocalFunctionTable>;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _iobuf {
    pub _Placeholder: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for _iobuf {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type FILE = _iobuf;
pub type fpos_t = ::std::os::raw::c_longlong;
extern "C" {
    pub static mut __security_cookie: uintptr_t;
}
extern "C" {
    pub fn __va_start(arg1: *mut va_list, ...);
    pub fn __security_init_cookie();
    pub fn __security_check_cookie(_StackCookie: uintptr_t);
    pub fn __report_gsfailure(_StackCookie: uintptr_t);
    pub fn _invalid_parameter_noinfo();
    pub fn _invalid_parameter_noinfo_noreturn();
    pub fn _invoke_watson(arg1: *const wchar_t, arg2: *const wchar_t,
                          arg3: *const wchar_t, arg4: ::std::os::raw::c_uint,
                          arg5: uintptr_t);
    pub fn _calloc_base(_Count: size_t, _Size: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn calloc(_Count: size_t, _Size: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn _callnewh(_Size: size_t) -> ::std::os::raw::c_int;
    pub fn _expand(_Block: *mut ::std::os::raw::c_void, _Size: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn _free_base(_Block: *mut ::std::os::raw::c_void);
    pub fn free(_Block: *mut ::std::os::raw::c_void);
    pub fn _malloc_base(_Size: size_t) -> *mut ::std::os::raw::c_void;
    pub fn malloc(_Size: size_t) -> *mut ::std::os::raw::c_void;
    pub fn _msize(_Block: *mut ::std::os::raw::c_void) -> size_t;
    pub fn _realloc_base(_Block: *mut ::std::os::raw::c_void, _Size: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn realloc(_Block: *mut ::std::os::raw::c_void, _Size: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn _recalloc(_Block: *mut ::std::os::raw::c_void, _Count: size_t,
                     _Size: size_t) -> *mut ::std::os::raw::c_void;
    pub fn _aligned_free(_Block: *mut ::std::os::raw::c_void);
    pub fn _aligned_malloc(_Size: size_t, _Alignment: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn _aligned_offset_malloc(_Size: size_t, _Alignment: size_t,
                                  _Offset: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn _aligned_msize(_Block: *mut ::std::os::raw::c_void,
                          _Alignment: size_t, _Offset: size_t) -> size_t;
    pub fn _aligned_offset_realloc(_Block: *mut ::std::os::raw::c_void,
                                   _Size: size_t, _Alignment: size_t,
                                   _Offset: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn _aligned_offset_recalloc(_Block: *mut ::std::os::raw::c_void,
                                    _Count: size_t, _Size: size_t,
                                    _Alignment: size_t, _Offset: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn _aligned_realloc(_Block: *mut ::std::os::raw::c_void,
                            _Size: size_t, _Alignment: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn _aligned_recalloc(_Block: *mut ::std::os::raw::c_void,
                             _Count: size_t, _Size: size_t,
                             _Alignment: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn _errno() -> *mut ::std::os::raw::c_int;
    pub fn _set_errno(_Value: ::std::os::raw::c_int) -> errno_t;
    pub fn _get_errno(_Value: *mut ::std::os::raw::c_int) -> errno_t;
    pub fn __threadid() -> ::std::os::raw::c_ulong;
    pub fn __threadhandle() -> uintptr_t;
    pub fn bsearch_s(_Key: *const ::std::os::raw::c_void,
                     _Base: *const ::std::os::raw::c_void,
                     _NumOfElements: rsize_t, _SizeOfElements: rsize_t,
                     _PtFuncCompare:
                         ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut ::std::os::raw::c_void,
                                                                    arg2:
                                                                        *const ::std::os::raw::c_void,
                                                                    arg3:
                                                                        *const ::std::os::raw::c_void)
                                                   -> ::std::os::raw::c_int>,
                     _Context: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
    pub fn qsort_s(_Base: *mut ::std::os::raw::c_void,
                   _NumOfElements: rsize_t, _SizeOfElements: rsize_t,
                   _PtFuncCompare:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut ::std::os::raw::c_void,
                                                                  arg2:
                                                                      *const ::std::os::raw::c_void,
                                                                  arg3:
                                                                      *const ::std::os::raw::c_void)
                                                 -> ::std::os::raw::c_int>,
                   _Context: *mut ::std::os::raw::c_void);
    pub fn bsearch(_Key: *const ::std::os::raw::c_void,
                   _Base: *const ::std::os::raw::c_void,
                   _NumOfElements: size_t, _SizeOfElements: size_t,
                   _PtFuncCompare:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *const ::std::os::raw::c_void,
                                                                  arg2:
                                                                      *const ::std::os::raw::c_void)
                                                 -> ::std::os::raw::c_int>)
     -> *mut ::std::os::raw::c_void;
    pub fn qsort(_Base: *mut ::std::os::raw::c_void, _NumOfElements: size_t,
                 _SizeOfElements: size_t,
                 _PtFuncCompare:
                     ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *const ::std::os::raw::c_void,
                                                                arg2:
                                                                    *const ::std::os::raw::c_void)
                                               -> ::std::os::raw::c_int>);
    pub fn _lfind_s(_Key: *const ::std::os::raw::c_void,
                    _Base: *const ::std::os::raw::c_void,
                    _NumOfElements: *mut ::std::os::raw::c_uint,
                    _SizeOfElements: size_t,
                    _PtFuncCompare:
                        ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut ::std::os::raw::c_void,
                                                                   arg2:
                                                                       *const ::std::os::raw::c_void,
                                                                   arg3:
                                                                       *const ::std::os::raw::c_void)
                                                  -> ::std::os::raw::c_int>,
                    _Context: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
    pub fn _lfind(_Key: *const ::std::os::raw::c_void,
                  _Base: *const ::std::os::raw::c_void,
                  _NumOfElements: *mut ::std::os::raw::c_uint,
                  _SizeOfElements: ::std::os::raw::c_uint,
                  _PtFuncCompare:
                      ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *const ::std::os::raw::c_void,
                                                                 arg2:
                                                                     *const ::std::os::raw::c_void)
                                                -> ::std::os::raw::c_int>)
     -> *mut ::std::os::raw::c_void;
    pub fn _lsearch_s(_Key: *const ::std::os::raw::c_void,
                      _Base: *mut ::std::os::raw::c_void,
                      _NumOfElements: *mut ::std::os::raw::c_uint,
                      _SizeOfElements: size_t,
                      _PtFuncCompare:
                          ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                         *mut ::std::os::raw::c_void,
                                                                     arg2:
                                                                         *const ::std::os::raw::c_void,
                                                                     arg3:
                                                                         *const ::std::os::raw::c_void)
                                                    -> ::std::os::raw::c_int>,
                      _Context: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
    pub fn _lsearch(_Key: *const ::std::os::raw::c_void,
                    _Base: *mut ::std::os::raw::c_void,
                    _NumOfElements: *mut ::std::os::raw::c_uint,
                    _SizeOfElements: ::std::os::raw::c_uint,
                    _PtFuncCompare:
                        ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *const ::std::os::raw::c_void,
                                                                   arg2:
                                                                       *const ::std::os::raw::c_void)
                                                  -> ::std::os::raw::c_int>)
     -> *mut ::std::os::raw::c_void;
    pub fn lfind(_Key: *const ::std::os::raw::c_void,
                 _Base: *const ::std::os::raw::c_void,
                 _NumOfElements: *mut ::std::os::raw::c_uint,
                 _SizeOfElements: ::std::os::raw::c_uint,
                 _PtFuncCompare:
                     ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *const ::std::os::raw::c_void,
                                                                arg2:
                                                                    *const ::std::os::raw::c_void)
                                               -> ::std::os::raw::c_int>)
     -> *mut ::std::os::raw::c_void;
    pub fn lsearch(_Key: *const ::std::os::raw::c_void,
                   _Base: *mut ::std::os::raw::c_void,
                   _NumOfElements: *mut ::std::os::raw::c_uint,
                   _SizeOfElements: ::std::os::raw::c_uint,
                   _PtFuncCompare:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *const ::std::os::raw::c_void,
                                                                  arg2:
                                                                      *const ::std::os::raw::c_void)
                                                 -> ::std::os::raw::c_int>)
     -> *mut ::std::os::raw::c_void;
    pub fn _itow_s(_Value: ::std::os::raw::c_int, _Buffer: *mut wchar_t,
                   _BufferCount: size_t, _Radix: ::std::os::raw::c_int)
     -> errno_t;
    pub fn _itow(_Value: ::std::os::raw::c_int, _Buffer: *mut wchar_t,
                 _Radix: ::std::os::raw::c_int) -> *mut wchar_t;
    pub fn _ltow_s(_Value: ::std::os::raw::c_long, _Buffer: *mut wchar_t,
                   _BufferCount: size_t, _Radix: ::std::os::raw::c_int)
     -> errno_t;
    pub fn _ltow(_Value: ::std::os::raw::c_long, _Buffer: *mut wchar_t,
                 _Radix: ::std::os::raw::c_int) -> *mut wchar_t;
    pub fn _ultow_s(_Value: ::std::os::raw::c_ulong, _Buffer: *mut wchar_t,
                    _BufferCount: size_t, _Radix: ::std::os::raw::c_int)
     -> errno_t;
    pub fn _ultow(_Value: ::std::os::raw::c_ulong, _Buffer: *mut wchar_t,
                  _Radix: ::std::os::raw::c_int) -> *mut wchar_t;
    pub fn wcstod(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f64;
    pub fn _wcstod_l(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t,
                     _Locale: _locale_t) -> f64;
    pub fn wcstol(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t,
                  _Radix: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
    pub fn _wcstol_l(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t,
                     _Radix: ::std::os::raw::c_int, _Locale: _locale_t)
     -> ::std::os::raw::c_long;
    pub fn wcstoll(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t,
                   _Radix: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
    pub fn _wcstoll_l(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t,
                      _Radix: ::std::os::raw::c_int, _Locale: _locale_t)
     -> ::std::os::raw::c_longlong;
    pub fn wcstoul(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t,
                   _Radix: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
    pub fn _wcstoul_l(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t,
                      _Radix: ::std::os::raw::c_int, _Locale: _locale_t)
     -> ::std::os::raw::c_ulong;
    pub fn wcstoull(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t,
                    _Radix: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
    pub fn _wcstoull_l(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t,
                       _Radix: ::std::os::raw::c_int, _Locale: _locale_t)
     -> ::std::os::raw::c_ulonglong;
    pub fn wcstold(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t)
     -> f64;
    pub fn _wcstold_l(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t,
                      _Locale: _locale_t) -> f64;
    pub fn wcstof(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f32;
    pub fn _wcstof_l(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t,
                     _Locale: _locale_t) -> f32;
    pub fn _wtof(_String: *const wchar_t) -> f64;
    pub fn _wtof_l(_String: *const wchar_t, _Locale: _locale_t) -> f64;
    pub fn _wtoi(_String: *const wchar_t) -> ::std::os::raw::c_int;
    pub fn _wtoi_l(_String: *const wchar_t, _Locale: _locale_t)
     -> ::std::os::raw::c_int;
    pub fn _wtol(_String: *const wchar_t) -> ::std::os::raw::c_long;
    pub fn _wtol_l(_String: *const wchar_t, _Locale: _locale_t)
     -> ::std::os::raw::c_long;
    pub fn _wtoll(_String: *const wchar_t) -> ::std::os::raw::c_longlong;
    pub fn _wtoll_l(_String: *const wchar_t, _Locale: _locale_t)
     -> ::std::os::raw::c_longlong;
    pub fn _i64tow_s(_Value: ::std::os::raw::c_longlong,
                     _Buffer: *mut wchar_t, _BufferCount: size_t,
                     _Radix: ::std::os::raw::c_int) -> errno_t;
    pub fn _i64tow(_Value: ::std::os::raw::c_longlong, _Buffer: *mut wchar_t,
                   _Radix: ::std::os::raw::c_int) -> *mut wchar_t;
    pub fn _ui64tow_s(_Value: ::std::os::raw::c_ulonglong,
                      _Buffer: *mut wchar_t, _BufferCount: size_t,
                      _Radix: ::std::os::raw::c_int) -> errno_t;
    pub fn _ui64tow(_Value: ::std::os::raw::c_ulonglong,
                    _Buffer: *mut wchar_t, _Radix: ::std::os::raw::c_int)
     -> *mut wchar_t;
    pub fn _wtoi64(_String: *const wchar_t) -> ::std::os::raw::c_longlong;
    pub fn _wtoi64_l(_String: *const wchar_t, _Locale: _locale_t)
     -> ::std::os::raw::c_longlong;
    pub fn _wcstoi64(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t,
                     _Radix: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
    pub fn _wcstoi64_l(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t,
                       _Radix: ::std::os::raw::c_int, _Locale: _locale_t)
     -> ::std::os::raw::c_longlong;
    pub fn _wcstoui64(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t,
                      _Radix: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
    pub fn _wcstoui64_l(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t,
                        _Radix: ::std::os::raw::c_int, _Locale: _locale_t)
     -> ::std::os::raw::c_ulonglong;
    pub fn _wfullpath(_Buffer: *mut wchar_t, _Path: *const wchar_t,
                      _BufferCount: size_t) -> *mut wchar_t;
    pub fn _wmakepath_s(_Buffer: *mut wchar_t, _BufferCount: size_t,
                        _Drive: *const wchar_t, _Dir: *const wchar_t,
                        _Filename: *const wchar_t, _Ext: *const wchar_t)
     -> errno_t;
    pub fn _wmakepath(_Buffer: *mut wchar_t, _Drive: *const wchar_t,
                      _Dir: *const wchar_t, _Filename: *const wchar_t,
                      _Ext: *const wchar_t);
    pub fn _wperror(_ErrorMessage: *const wchar_t);
    pub fn _wsplitpath(_FullPath: *const wchar_t, _Drive: *mut wchar_t,
                       _Dir: *mut wchar_t, _Filename: *mut wchar_t,
                       _Ext: *mut wchar_t);
    pub fn _wsplitpath_s(_FullPath: *const wchar_t, _Drive: *mut wchar_t,
                         _DriveCount: size_t, _Dir: *mut wchar_t,
                         _DirCount: size_t, _Filename: *mut wchar_t,
                         _FilenameCount: size_t, _Ext: *mut wchar_t,
                         _ExtCount: size_t) -> errno_t;
    pub fn _wdupenv_s(_Buffer: *mut *mut wchar_t, _BufferCount: *mut size_t,
                      _VarName: *const wchar_t) -> errno_t;
    pub fn _wgetenv(_VarName: *const wchar_t) -> *mut wchar_t;
    pub fn _wgetenv_s(_RequiredCount: *mut size_t, _Buffer: *mut wchar_t,
                      _BufferCount: size_t, _VarName: *const wchar_t)
     -> errno_t;
    pub fn _wputenv(_EnvString: *const wchar_t) -> ::std::os::raw::c_int;
    pub fn _wputenv_s(_Name: *const wchar_t, _Value: *const wchar_t)
     -> errno_t;
    pub fn _wsearchenv_s(_Filename: *const wchar_t, _VarName: *const wchar_t,
                         _Buffer: *mut wchar_t, _BufferCount: size_t)
     -> errno_t;
    pub fn _wsearchenv(_Filename: *const wchar_t, _VarName: *const wchar_t,
                       _ResultPath: *mut wchar_t);
    pub fn _wsystem(_Command: *const wchar_t) -> ::std::os::raw::c_int;
    pub fn _swab(_Buf1: *mut ::std::os::raw::c_char,
                 _Buf2: *mut ::std::os::raw::c_char,
                 _SizeInBytes: ::std::os::raw::c_int);
    pub fn exit(_Code: ::std::os::raw::c_int);
    pub fn _exit(_Code: ::std::os::raw::c_int);
    pub fn _Exit(_Code: ::std::os::raw::c_int);
    pub fn quick_exit(_Code: ::std::os::raw::c_int);
    pub fn abort();
    pub fn _set_abort_behavior(_Flags: ::std::os::raw::c_uint,
                               _Mask: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uint;
    pub fn atexit(arg1: ::std::option::Option<extern "C" fn()>)
     -> ::std::os::raw::c_int;
    pub fn _onexit(_Func: _onexit_t) -> _onexit_t;
    pub fn at_quick_exit(arg1: ::std::option::Option<extern "C" fn()>)
     -> ::std::os::raw::c_int;
    pub fn _set_purecall_handler(_Handler: _purecall_handler)
     -> _purecall_handler;
    pub fn _get_purecall_handler() -> _purecall_handler;
    pub fn _set_invalid_parameter_handler(_Handler:
                                              _invalid_parameter_handler)
     -> _invalid_parameter_handler;
    pub fn _get_invalid_parameter_handler() -> _invalid_parameter_handler;
    pub fn _set_thread_local_invalid_parameter_handler(_Handler:
                                                           _invalid_parameter_handler)
     -> _invalid_parameter_handler;
    pub fn _get_thread_local_invalid_parameter_handler()
     -> _invalid_parameter_handler;
    pub fn _set_error_mode(_Mode: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn __doserrno() -> *mut ::std::os::raw::c_ulong;
    pub fn _set_doserrno(_Value: ::std::os::raw::c_ulong) -> errno_t;
    pub fn _get_doserrno(_Value: *mut ::std::os::raw::c_ulong) -> errno_t;
    pub fn __sys_errlist() -> *mut *mut ::std::os::raw::c_char;
    pub fn __sys_nerr() -> *mut ::std::os::raw::c_int;
    pub fn perror(_ErrorMessage: *const ::std::os::raw::c_char);
    pub fn __p__pgmptr() -> *mut *mut ::std::os::raw::c_char;
    pub fn __p__wpgmptr() -> *mut *mut wchar_t;
    pub fn __p__fmode() -> *mut ::std::os::raw::c_int;
    pub fn _get_pgmptr(_Value: *mut *mut ::std::os::raw::c_char) -> errno_t;
    pub fn _get_wpgmptr(_Value: *mut *mut wchar_t) -> errno_t;
    pub fn _set_fmode(_Mode: ::std::os::raw::c_int) -> errno_t;
    pub fn _get_fmode(_PMode: *mut ::std::os::raw::c_int) -> errno_t;
    pub fn abs(_Number: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn labs(_Number: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
    pub fn llabs(_Number: ::std::os::raw::c_longlong)
     -> ::std::os::raw::c_longlong;
    pub fn _abs64(_Number: ::std::os::raw::c_longlong)
     -> ::std::os::raw::c_longlong;
    pub fn _byteswap_ushort(_Number: ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_ushort;
    pub fn _byteswap_ulong(_Number: ::std::os::raw::c_ulong)
     -> ::std::os::raw::c_ulong;
    pub fn _byteswap_uint64(_Number: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_ulonglong;
    pub fn div(_Numerator: ::std::os::raw::c_int,
               _Denominator: ::std::os::raw::c_int) -> div_t;
    pub fn ldiv(_Numerator: ::std::os::raw::c_long,
                _Denominator: ::std::os::raw::c_long) -> ldiv_t;
    pub fn lldiv(_Numerator: ::std::os::raw::c_longlong,
                 _Denominator: ::std::os::raw::c_longlong) -> lldiv_t;
    pub fn _rotl(_Value: ::std::os::raw::c_uint,
                 _Shift: ::std::os::raw::c_int) -> ::std::os::raw::c_uint;
    pub fn _lrotl(_Value: ::std::os::raw::c_ulong,
                  _Shift: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
    pub fn _rotl64(_Value: ::std::os::raw::c_ulonglong,
                   _Shift: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
    pub fn _rotr(_Value: ::std::os::raw::c_uint,
                 _Shift: ::std::os::raw::c_int) -> ::std::os::raw::c_uint;
    pub fn _lrotr(_Value: ::std::os::raw::c_ulong,
                  _Shift: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
    pub fn _rotr64(_Value: ::std::os::raw::c_ulonglong,
                   _Shift: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
    pub fn srand(_Seed: ::std::os::raw::c_uint);
    pub fn rand() -> ::std::os::raw::c_int;
    pub fn atof(_String: *const ::std::os::raw::c_char) -> f64;
    pub fn atoi(_String: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn atol(_String: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_long;
    pub fn atoll(_String: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_longlong;
    pub fn _atoi64(_String: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_longlong;
    pub fn _atof_l(_String: *const ::std::os::raw::c_char, _Locale: _locale_t)
     -> f64;
    pub fn _atoi_l(_String: *const ::std::os::raw::c_char, _Locale: _locale_t)
     -> ::std::os::raw::c_int;
    pub fn _atol_l(_String: *const ::std::os::raw::c_char, _Locale: _locale_t)
     -> ::std::os::raw::c_long;
    pub fn _atoll_l(_String: *const ::std::os::raw::c_char,
                    _Locale: _locale_t) -> ::std::os::raw::c_longlong;
    pub fn _atoi64_l(_String: *const ::std::os::raw::c_char,
                     _Locale: _locale_t) -> ::std::os::raw::c_longlong;
    pub fn _atoflt(_Result: *mut _CRT_FLOAT,
                   _String: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn _atodbl(_Result: *mut _CRT_DOUBLE,
                   _String: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn _atoldbl(_Result: *mut _LDOUBLE,
                    _String: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn _atoflt_l(_Result: *mut _CRT_FLOAT,
                     _String: *const ::std::os::raw::c_char,
                     _Locale: _locale_t) -> ::std::os::raw::c_int;
    pub fn _atodbl_l(_Result: *mut _CRT_DOUBLE,
                     _String: *mut ::std::os::raw::c_char, _Locale: _locale_t)
     -> ::std::os::raw::c_int;
    pub fn _atoldbl_l(_Result: *mut _LDOUBLE,
                      _String: *mut ::std::os::raw::c_char,
                      _Locale: _locale_t) -> ::std::os::raw::c_int;
    pub fn strtof(_String: *const ::std::os::raw::c_char,
                  _EndPtr: *mut *mut ::std::os::raw::c_char) -> f32;
    pub fn _strtof_l(_String: *const ::std::os::raw::c_char,
                     _EndPtr: *mut *mut ::std::os::raw::c_char,
                     _Locale: _locale_t) -> f32;
    pub fn strtod(_String: *const ::std::os::raw::c_char,
                  _EndPtr: *mut *mut ::std::os::raw::c_char) -> f64;
    pub fn _strtod_l(_String: *const ::std::os::raw::c_char,
                     _EndPtr: *mut *mut ::std::os::raw::c_char,
                     _Locale: _locale_t) -> f64;
    pub fn strtold(_String: *const ::std::os::raw::c_char,
                   _EndPtr: *mut *mut ::std::os::raw::c_char) -> f64;
    pub fn _strtold_l(_String: *const ::std::os::raw::c_char,
                      _EndPtr: *mut *mut ::std::os::raw::c_char,
                      _Locale: _locale_t) -> f64;
    pub fn strtol(_String: *const ::std::os::raw::c_char,
                  _EndPtr: *mut *mut ::std::os::raw::c_char,
                  _Radix: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
    pub fn _strtol_l(_String: *const ::std::os::raw::c_char,
                     _EndPtr: *mut *mut ::std::os::raw::c_char,
                     _Radix: ::std::os::raw::c_int, _Locale: _locale_t)
     -> ::std::os::raw::c_long;
    pub fn strtoll(_String: *const ::std::os::raw::c_char,
                   _EndPtr: *mut *mut ::std::os::raw::c_char,
                   _Radix: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
    pub fn _strtoll_l(_String: *const ::std::os::raw::c_char,
                      _EndPtr: *mut *mut ::std::os::raw::c_char,
                      _Radix: ::std::os::raw::c_int, _Locale: _locale_t)
     -> ::std::os::raw::c_longlong;
    pub fn strtoul(_String: *const ::std::os::raw::c_char,
                   _EndPtr: *mut *mut ::std::os::raw::c_char,
                   _Radix: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
    pub fn _strtoul_l(_String: *const ::std::os::raw::c_char,
                      _EndPtr: *mut *mut ::std::os::raw::c_char,
                      _Radix: ::std::os::raw::c_int, _Locale: _locale_t)
     -> ::std::os::raw::c_ulong;
    pub fn strtoull(_String: *const ::std::os::raw::c_char,
                    _EndPtr: *mut *mut ::std::os::raw::c_char,
                    _Radix: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
    pub fn _strtoull_l(_String: *const ::std::os::raw::c_char,
                       _EndPtr: *mut *mut ::std::os::raw::c_char,
                       _Radix: ::std::os::raw::c_int, _Locale: _locale_t)
     -> ::std::os::raw::c_ulonglong;
    pub fn _strtoi64(_String: *const ::std::os::raw::c_char,
                     _EndPtr: *mut *mut ::std::os::raw::c_char,
                     _Radix: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
    pub fn _strtoi64_l(_String: *const ::std::os::raw::c_char,
                       _EndPtr: *mut *mut ::std::os::raw::c_char,
                       _Radix: ::std::os::raw::c_int, _Locale: _locale_t)
     -> ::std::os::raw::c_longlong;
    pub fn _strtoui64(_String: *const ::std::os::raw::c_char,
                      _EndPtr: *mut *mut ::std::os::raw::c_char,
                      _Radix: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
    pub fn _strtoui64_l(_String: *const ::std::os::raw::c_char,
                        _EndPtr: *mut *mut ::std::os::raw::c_char,
                        _Radix: ::std::os::raw::c_int, _Locale: _locale_t)
     -> ::std::os::raw::c_ulonglong;
    pub fn _itoa_s(_Value: ::std::os::raw::c_int,
                   _Buffer: *mut ::std::os::raw::c_char, _BufferCount: size_t,
                   _Radix: ::std::os::raw::c_int) -> errno_t;
    pub fn _itoa(_Value: ::std::os::raw::c_int,
                 _Buffer: *mut ::std::os::raw::c_char,
                 _Radix: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn _ltoa_s(_Value: ::std::os::raw::c_long,
                   _Buffer: *mut ::std::os::raw::c_char, _BufferCount: size_t,
                   _Radix: ::std::os::raw::c_int) -> errno_t;
    pub fn _ltoa(_Value: ::std::os::raw::c_long,
                 _Buffer: *mut ::std::os::raw::c_char,
                 _Radix: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn _ultoa_s(_Value: ::std::os::raw::c_ulong,
                    _Buffer: *mut ::std::os::raw::c_char,
                    _BufferCount: size_t, _Radix: ::std::os::raw::c_int)
     -> errno_t;
    pub fn _ultoa(_Value: ::std::os::raw::c_ulong,
                  _Buffer: *mut ::std::os::raw::c_char,
                  _Radix: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn _i64toa_s(_Value: ::std::os::raw::c_longlong,
                     _Buffer: *mut ::std::os::raw::c_char,
                     _BufferCount: size_t, _Radix: ::std::os::raw::c_int)
     -> errno_t;
    pub fn _i64toa(_Value: ::std::os::raw::c_longlong,
                   _Buffer: *mut ::std::os::raw::c_char,
                   _Radix: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn _ui64toa_s(_Value: ::std::os::raw::c_ulonglong,
                      _Buffer: *mut ::std::os::raw::c_char,
                      _BufferCount: size_t, _Radix: ::std::os::raw::c_int)
     -> errno_t;
    pub fn _ui64toa(_Value: ::std::os::raw::c_ulonglong,
                    _Buffer: *mut ::std::os::raw::c_char,
                    _Radix: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn _ecvt_s(_Buffer: *mut ::std::os::raw::c_char, _BufferCount: size_t,
                   _Value: f64, _DigitCount: ::std::os::raw::c_int,
                   _PtDec: *mut ::std::os::raw::c_int,
                   _PtSign: *mut ::std::os::raw::c_int) -> errno_t;
    pub fn _ecvt(_Value: f64, _DigitCount: ::std::os::raw::c_int,
                 _PtDec: *mut ::std::os::raw::c_int,
                 _PtSign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn _fcvt_s(_Buffer: *mut ::std::os::raw::c_char, _BufferCount: size_t,
                   _Value: f64, _FractionalDigitCount: ::std::os::raw::c_int,
                   _PtDec: *mut ::std::os::raw::c_int,
                   _PtSign: *mut ::std::os::raw::c_int) -> errno_t;
    pub fn _fcvt(_Value: f64, _FractionalDigitCount: ::std::os::raw::c_int,
                 _PtDec: *mut ::std::os::raw::c_int,
                 _PtSign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn _gcvt_s(_Buffer: *mut ::std::os::raw::c_char, _BufferCount: size_t,
                   _Value: f64, _DigitCount: ::std::os::raw::c_int)
     -> errno_t;
    pub fn _gcvt(_Value: f64, _DigitCount: ::std::os::raw::c_int,
                 _Buffer: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn ___mb_cur_max_func() -> ::std::os::raw::c_int;
    pub fn ___mb_cur_max_l_func(arg1: _locale_t) -> ::std::os::raw::c_int;
    pub fn mblen(_Ch: *const ::std::os::raw::c_char, _MaxCount: size_t)
     -> ::std::os::raw::c_int;
    pub fn _mblen_l(_Ch: *const ::std::os::raw::c_char, _MaxCount: size_t,
                    _Locale: _locale_t) -> ::std::os::raw::c_int;
    pub fn _mbstrlen(_String: *const ::std::os::raw::c_char) -> size_t;
    pub fn _mbstrlen_l(_String: *const ::std::os::raw::c_char,
                       _Locale: _locale_t) -> size_t;
    pub fn _mbstrnlen(_String: *const ::std::os::raw::c_char,
                      _MaxCount: size_t) -> size_t;
    pub fn _mbstrnlen_l(_String: *const ::std::os::raw::c_char,
                        _MaxCount: size_t, _Locale: _locale_t) -> size_t;
    pub fn mbtowc(_DstCh: *mut wchar_t, _SrcCh: *const ::std::os::raw::c_char,
                  _SrcSizeInBytes: size_t) -> ::std::os::raw::c_int;
    pub fn _mbtowc_l(_DstCh: *mut wchar_t,
                     _SrcCh: *const ::std::os::raw::c_char,
                     _SrcSizeInBytes: size_t, _Locale: _locale_t)
     -> ::std::os::raw::c_int;
    pub fn mbstowcs_s(_PtNumOfCharConverted: *mut size_t,
                      _DstBuf: *mut wchar_t, _SizeInWords: size_t,
                      _SrcBuf: *const ::std::os::raw::c_char,
                      _MaxCount: size_t) -> errno_t;
    pub fn mbstowcs(_Dest: *mut wchar_t,
                    _Source: *const ::std::os::raw::c_char, _MaxCount: size_t)
     -> size_t;
    pub fn _mbstowcs_s_l(_PtNumOfCharConverted: *mut size_t,
                         _DstBuf: *mut wchar_t, _SizeInWords: size_t,
                         _SrcBuf: *const ::std::os::raw::c_char,
                         _MaxCount: size_t, _Locale: _locale_t) -> errno_t;
    pub fn _mbstowcs_l(_Dest: *mut wchar_t,
                       _Source: *const ::std::os::raw::c_char,
                       _MaxCount: size_t, _Locale: _locale_t) -> size_t;
    pub fn wctomb(_MbCh: *mut ::std::os::raw::c_char, _WCh: wchar_t)
     -> ::std::os::raw::c_int;
    pub fn _wctomb_l(_MbCh: *mut ::std::os::raw::c_char, _WCh: wchar_t,
                     _Locale: _locale_t) -> ::std::os::raw::c_int;
    pub fn wctomb_s(_SizeConverted: *mut ::std::os::raw::c_int,
                    _MbCh: *mut ::std::os::raw::c_char, _SizeInBytes: rsize_t,
                    _WCh: wchar_t) -> errno_t;
    pub fn _wctomb_s_l(_SizeConverted: *mut ::std::os::raw::c_int,
                       _MbCh: *mut ::std::os::raw::c_char,
                       _SizeInBytes: size_t, _WCh: wchar_t,
                       _Locale: _locale_t) -> errno_t;
    pub fn wcstombs_s(_PtNumOfCharConverted: *mut size_t,
                      _Dst: *mut ::std::os::raw::c_char,
                      _DstSizeInBytes: size_t, _Src: *const wchar_t,
                      _MaxCountInBytes: size_t) -> errno_t;
    pub fn wcstombs(_Dest: *mut ::std::os::raw::c_char,
                    _Source: *const wchar_t, _MaxCount: size_t) -> size_t;
    pub fn _wcstombs_s_l(_PtNumOfCharConverted: *mut size_t,
                         _Dst: *mut ::std::os::raw::c_char,
                         _DstSizeInBytes: size_t, _Src: *const wchar_t,
                         _MaxCountInBytes: size_t, _Locale: _locale_t)
     -> errno_t;
    pub fn _wcstombs_l(_Dest: *mut ::std::os::raw::c_char,
                       _Source: *const wchar_t, _MaxCount: size_t,
                       _Locale: _locale_t) -> size_t;
    pub fn _fullpath(_Buffer: *mut ::std::os::raw::c_char,
                     _Path: *const ::std::os::raw::c_char,
                     _BufferCount: size_t) -> *mut ::std::os::raw::c_char;
    pub fn _makepath_s(_Buffer: *mut ::std::os::raw::c_char,
                       _BufferCount: size_t,
                       _Drive: *const ::std::os::raw::c_char,
                       _Dir: *const ::std::os::raw::c_char,
                       _Filename: *const ::std::os::raw::c_char,
                       _Ext: *const ::std::os::raw::c_char) -> errno_t;
    pub fn _makepath(_Buffer: *mut ::std::os::raw::c_char,
                     _Drive: *const ::std::os::raw::c_char,
                     _Dir: *const ::std::os::raw::c_char,
                     _Filename: *const ::std::os::raw::c_char,
                     _Ext: *const ::std::os::raw::c_char);
    pub fn _splitpath(_FullPath: *const ::std::os::raw::c_char,
                      _Drive: *mut ::std::os::raw::c_char,
                      _Dir: *mut ::std::os::raw::c_char,
                      _Filename: *mut ::std::os::raw::c_char,
                      _Ext: *mut ::std::os::raw::c_char);
    pub fn _splitpath_s(_FullPath: *const ::std::os::raw::c_char,
                        _Drive: *mut ::std::os::raw::c_char,
                        _DriveCount: size_t,
                        _Dir: *mut ::std::os::raw::c_char, _DirCount: size_t,
                        _Filename: *mut ::std::os::raw::c_char,
                        _FilenameCount: size_t,
                        _Ext: *mut ::std::os::raw::c_char, _ExtCount: size_t)
     -> errno_t;
    pub fn getenv_s(_RequiredCount: *mut size_t,
                    _Buffer: *mut ::std::os::raw::c_char,
                    _BufferCount: rsize_t,
                    _VarName: *const ::std::os::raw::c_char) -> errno_t;
    pub fn __p___argc() -> *mut ::std::os::raw::c_int;
    pub fn __p___argv() -> *mut *mut *mut ::std::os::raw::c_char;
    pub fn __p___wargv() -> *mut *mut *mut wchar_t;
    pub fn __p__environ() -> *mut *mut *mut ::std::os::raw::c_char;
    pub fn __p__wenviron() -> *mut *mut *mut wchar_t;
    pub fn getenv(_VarName: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn _dupenv_s(_Buffer: *mut *mut ::std::os::raw::c_char,
                     _BufferCount: *mut size_t,
                     _VarName: *const ::std::os::raw::c_char) -> errno_t;
    pub fn system(_Command: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn _putenv(_EnvString: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn _putenv_s(_Name: *const ::std::os::raw::c_char,
                     _Value: *const ::std::os::raw::c_char) -> errno_t;
    pub fn _searchenv_s(_Filename: *const ::std::os::raw::c_char,
                        _VarName: *const ::std::os::raw::c_char,
                        _Buffer: *mut ::std::os::raw::c_char,
                        _BufferCount: size_t) -> errno_t;
    pub fn _searchenv(_Filename: *const ::std::os::raw::c_char,
                      _VarName: *const ::std::os::raw::c_char,
                      _Buffer: *mut ::std::os::raw::c_char);
    pub fn _seterrormode(_Mode: ::std::os::raw::c_int);
    pub fn _beep(_Frequency: ::std::os::raw::c_uint,
                 _Duration: ::std::os::raw::c_uint);
    pub fn _sleep(_Duration: ::std::os::raw::c_ulong);
    pub fn ecvt(_Value: f64, _DigitCount: ::std::os::raw::c_int,
                _PtDec: *mut ::std::os::raw::c_int,
                _PtSign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn fcvt(_Value: f64, _FractionalDigitCount: ::std::os::raw::c_int,
                _PtDec: *mut ::std::os::raw::c_int,
                _PtSign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn gcvt(_Value: f64, _DigitCount: ::std::os::raw::c_int,
                _DstBuf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn itoa(_Value: ::std::os::raw::c_int,
                _Buffer: *mut ::std::os::raw::c_char,
                _Radix: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    pub fn ltoa(_Value: ::std::os::raw::c_long,
                _Buffer: *mut ::std::os::raw::c_char,
                _Radix: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    pub fn swab(_Buf1: *mut ::std::os::raw::c_char,
                _Buf2: *mut ::std::os::raw::c_char,
                _SizeInBytes: ::std::os::raw::c_int);
    pub fn ultoa(_Value: ::std::os::raw::c_ulong,
                 _Buffer: *mut ::std::os::raw::c_char,
                 _Radix: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn putenv(_EnvString: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn onexit(_Func: _onexit_t) -> _onexit_t;
    pub fn double_to_uint64_helper(d: f64) -> uint64_T;
    pub fn mxMalloc(n: size_t) -> *mut ::std::os::raw::c_void;
    pub fn mxCalloc(n: size_t, size: size_t) -> *mut ::std::os::raw::c_void;
    pub fn mxFree(ptr: *mut ::std::os::raw::c_void);
    pub fn mxRealloc(ptr: *mut ::std::os::raw::c_void, size: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn mxGetNumberOfDimensions_730(pa: *const mxArray) -> size_t;
    pub fn mxGetNumberOfDimensions_700(pa: *const mxArray)
     -> ::std::os::raw::c_int;
    pub fn mxGetDimensions_730(pa: *const mxArray) -> *const size_t;
    pub fn mxGetDimensions_700(pa: *const mxArray)
     -> *const ::std::os::raw::c_int;
    pub fn mxGetM(pa: *const mxArray) -> size_t;
    pub fn mxGetIr_730(pa: *const mxArray) -> *mut size_t;
    pub fn mxGetIr_700(pa: *const mxArray) -> *mut ::std::os::raw::c_int;
    pub fn mxGetJc_730(pa: *const mxArray) -> *mut size_t;
    pub fn mxGetJc_700(pa: *const mxArray) -> *mut ::std::os::raw::c_int;
    pub fn mxGetNzmax_730(pa: *const mxArray) -> size_t;
    pub fn mxGetNzmax_700(pa: *const mxArray) -> ::std::os::raw::c_int;
    pub fn mxSetNzmax_730(pa: *mut mxArray, nzmax: size_t);
    pub fn mxSetNzmax_700(pa: *mut mxArray, nzmax: ::std::os::raw::c_int);
    pub fn mxGetFieldNameByNumber(pa: *const mxArray,
                                  n: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn mxGetFieldByNumber_730(pa: *const mxArray, i: size_t,
                                  fieldnum: ::std::os::raw::c_int)
     -> *mut mxArray;
    pub fn mxGetFieldByNumber_700(pa: *const mxArray,
                                  i: ::std::os::raw::c_int,
                                  fieldnum: ::std::os::raw::c_int)
     -> *mut mxArray;
    pub fn mxGetCell_730(pa: *const mxArray, i: size_t) -> *mut mxArray;
    pub fn mxGetCell_700(pa: *const mxArray, i: ::std::os::raw::c_int)
     -> *mut mxArray;
    pub fn mxGetClassID(pa: *const mxArray) -> mxClassID;
    pub fn mxGetData(pa: *const mxArray) -> *mut ::std::os::raw::c_void;
    pub fn mxSetData(pa: *mut mxArray, newdata: *mut ::std::os::raw::c_void);
    pub fn mxIsNumeric(pa: *const mxArray) -> bool_;
    pub fn mxIsCell(pa: *const mxArray) -> bool_;
    pub fn mxIsLogical(pa: *const mxArray) -> bool_;
    pub fn mxIsScalar(pa: *const mxArray) -> bool_;
    pub fn mxIsChar(pa: *const mxArray) -> bool_;
    pub fn mxIsStruct(pa: *const mxArray) -> bool_;
    pub fn mxIsOpaque(pa: *const mxArray) -> bool_;
    pub fn mxIsFunctionHandle(pa: *const mxArray) -> bool_;
    pub fn mxIsObject(pa: *const mxArray) -> bool_;
    pub fn mxGetImagData(pa: *const mxArray) -> *mut ::std::os::raw::c_void;
    pub fn mxSetImagData(pa: *mut mxArray,
                         newdata: *mut ::std::os::raw::c_void);
    pub fn mxIsComplex(pa: *const mxArray) -> bool_;
    pub fn mxIsSparse(pa: *const mxArray) -> bool_;
    pub fn mxIsDouble(pa: *const mxArray) -> bool_;
    pub fn mxIsSingle(pa: *const mxArray) -> bool_;
    pub fn mxIsInt8(pa: *const mxArray) -> bool_;
    pub fn mxIsUint8(pa: *const mxArray) -> bool_;
    pub fn mxIsInt16(pa: *const mxArray) -> bool_;
    pub fn mxIsUint16(pa: *const mxArray) -> bool_;
    pub fn mxIsInt32(pa: *const mxArray) -> bool_;
    pub fn mxIsUint32(pa: *const mxArray) -> bool_;
    pub fn mxIsInt64(pa: *const mxArray) -> bool_;
    pub fn mxIsUint64(pa: *const mxArray) -> bool_;
    pub fn mxGetNumberOfElements(pa: *const mxArray) -> size_t;
    pub fn mxGetPr(pa: *const mxArray) -> *mut f64;
    pub fn mxSetPr(pa: *mut mxArray, pr: *mut f64);
    pub fn mxGetPi(pa: *const mxArray) -> *mut f64;
    pub fn mxSetPi(pa: *mut mxArray, pi: *mut f64);
    pub fn mxGetChars(pa: *const mxArray) -> *mut mxChar;
    pub fn mxGetUserBits(pa: *const mxArray) -> ::std::os::raw::c_int;
    pub fn mxSetUserBits(pa: *mut mxArray, value: ::std::os::raw::c_int);
    pub fn mxGetScalar(pa: *const mxArray) -> f64;
    pub fn mxIsFromGlobalWS(pa: *const mxArray) -> bool_;
    pub fn mxSetFromGlobalWS(pa: *mut mxArray, global: bool_);
    pub fn mxSetM_730(pa: *mut mxArray, m: size_t);
    pub fn mxSetM_700(pa: *mut mxArray, m: ::std::os::raw::c_int);
    pub fn mxGetN(pa: *const mxArray) -> size_t;
    pub fn mxIsEmpty(pa: *const mxArray) -> bool_;
    pub fn mxGetFieldNumber(pa: *const mxArray,
                            name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn mxSetIr_730(pa: *mut mxArray, newir: *mut size_t);
    pub fn mxSetIr_700(pa: *mut mxArray, newir: *mut ::std::os::raw::c_int);
    pub fn mxSetJc_730(pa: *mut mxArray, newjc: *mut size_t);
    pub fn mxSetJc_700(pa: *mut mxArray, newjc: *mut ::std::os::raw::c_int);
    pub fn mxGetElementSize(pa: *const mxArray) -> size_t;
    pub fn mxCalcSingleSubscript_730(pa: *const mxArray, nsubs: size_t,
                                     subs: *const size_t) -> size_t;
    pub fn mxCalcSingleSubscript_700(pa: *const mxArray,
                                     nsubs: ::std::os::raw::c_int,
                                     subs: *const ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn mxGetNumberOfFields(pa: *const mxArray) -> ::std::os::raw::c_int;
    pub fn mxSetCell_730(pa: *mut mxArray, i: size_t, value: *mut mxArray);
    pub fn mxSetCell_700(pa: *mut mxArray, i: ::std::os::raw::c_int,
                         value: *mut mxArray);
    pub fn mxSetFieldByNumber_730(pa: *mut mxArray, i: size_t,
                                  fieldnum: ::std::os::raw::c_int,
                                  value: *mut mxArray);
    pub fn mxSetFieldByNumber_700(pa: *mut mxArray, i: ::std::os::raw::c_int,
                                  fieldnum: ::std::os::raw::c_int,
                                  value: *mut mxArray);
    pub fn mxGetField_730(pa: *const mxArray, i: size_t,
                          fieldname: *const ::std::os::raw::c_char)
     -> *mut mxArray;
    pub fn mxGetField_700(pa: *const mxArray, i: ::std::os::raw::c_int,
                          fieldname: *const ::std::os::raw::c_char)
     -> *mut mxArray;
    pub fn mxSetField_730(pa: *mut mxArray, i: size_t,
                          fieldname: *const ::std::os::raw::c_char,
                          value: *mut mxArray);
    pub fn mxSetField_700(pa: *mut mxArray, i: ::std::os::raw::c_int,
                          fieldname: *const ::std::os::raw::c_char,
                          value: *mut mxArray);
    pub fn mxGetProperty_730(pa: *const mxArray, i: size_t,
                             propname: *const ::std::os::raw::c_char)
     -> *mut mxArray;
    pub fn mxGetProperty_700(pa: *const mxArray, i: ::std::os::raw::c_int,
                             propname: *const ::std::os::raw::c_char)
     -> *mut mxArray;
    pub fn mxSetProperty_730(pa: *mut mxArray, i: size_t,
                             propname: *const ::std::os::raw::c_char,
                             value: *const mxArray);
    pub fn mxSetProperty_700(pa: *mut mxArray, i: ::std::os::raw::c_int,
                             propname: *const ::std::os::raw::c_char,
                             value: *const mxArray);
    pub fn mxGetClassName(pa: *const mxArray)
     -> *const ::std::os::raw::c_char;
    pub fn mxIsClass(pa: *const mxArray, name: *const ::std::os::raw::c_char)
     -> bool_;
    pub fn mxCreateNumericMatrix_730(m: size_t, n: size_t, classid: mxClassID,
                                     flag: mxComplexity) -> *mut mxArray;
    pub fn mxCreateNumericMatrix_700(m: ::std::os::raw::c_int,
                                     n: ::std::os::raw::c_int,
                                     classid: mxClassID, flag: mxComplexity)
     -> *mut mxArray;
    pub fn mxCreateUninitNumericMatrix(m: size_t, n: size_t,
                                       classid: mxClassID, flag: mxComplexity)
     -> *mut mxArray;
    pub fn mxCreateUninitNumericArray(ndim: size_t, dims: *mut size_t,
                                      classid: mxClassID, flag: mxComplexity)
     -> *mut mxArray;
    pub fn mxSetN_730(pa: *mut mxArray, n: size_t);
    pub fn mxSetN_700(pa: *mut mxArray, n: ::std::os::raw::c_int);
    pub fn mxSetDimensions_730(pa: *mut mxArray, pdims: *const size_t,
                               ndims: size_t) -> ::std::os::raw::c_int;
    pub fn mxSetDimensions_700(pa: *mut mxArray,
                               pdims: *const ::std::os::raw::c_int,
                               ndims: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn mxDestroyArray(pa: *mut mxArray);
    pub fn mxCreateNumericArray_730(ndim: size_t, dims: *const size_t,
                                    classid: mxClassID, flag: mxComplexity)
     -> *mut mxArray;
    pub fn mxCreateNumericArray_700(ndim: ::std::os::raw::c_int,
                                    dims: *const ::std::os::raw::c_int,
                                    classid: mxClassID, flag: mxComplexity)
     -> *mut mxArray;
    pub fn mxCreateCharArray_730(ndim: size_t, dims: *const size_t)
     -> *mut mxArray;
    pub fn mxCreateCharArray_700(ndim: ::std::os::raw::c_int,
                                 dims: *const ::std::os::raw::c_int)
     -> *mut mxArray;
    pub fn mxCreateDoubleMatrix_730(m: size_t, n: size_t, flag: mxComplexity)
     -> *mut mxArray;
    pub fn mxCreateDoubleMatrix_700(m: ::std::os::raw::c_int,
                                    n: ::std::os::raw::c_int,
                                    flag: mxComplexity) -> *mut mxArray;
    pub fn mxGetLogicals(pa: *const mxArray) -> *mut mxLogical;
    pub fn mxCreateLogicalArray_730(ndim: size_t, dims: *const size_t)
     -> *mut mxArray;
    pub fn mxCreateLogicalArray_700(ndim: ::std::os::raw::c_int,
                                    dims: *const ::std::os::raw::c_int)
     -> *mut mxArray;
    pub fn mxCreateLogicalMatrix_730(m: size_t, n: size_t) -> *mut mxArray;
    pub fn mxCreateLogicalMatrix_700(m: ::std::os::raw::c_int,
                                     n: ::std::os::raw::c_int)
     -> *mut mxArray;
    pub fn mxCreateLogicalScalar(value: bool_) -> *mut mxArray;
    pub fn mxIsLogicalScalar(pa: *const mxArray) -> bool_;
    pub fn mxIsLogicalScalarTrue(pa: *const mxArray) -> bool_;
    pub fn mxCreateDoubleScalar(value: f64) -> *mut mxArray;
    pub fn mxCreateSparse_730(m: size_t, n: size_t, nzmax: size_t,
                              flag: mxComplexity) -> *mut mxArray;
    pub fn mxCreateSparse_700(m: ::std::os::raw::c_int,
                              n: ::std::os::raw::c_int,
                              nzmax: ::std::os::raw::c_int,
                              flag: mxComplexity) -> *mut mxArray;
    pub fn mxCreateSparseLogicalMatrix_730(m: size_t, n: size_t,
                                           nzmax: size_t) -> *mut mxArray;
    pub fn mxCreateSparseLogicalMatrix_700(m: ::std::os::raw::c_int,
                                           n: ::std::os::raw::c_int,
                                           nzmax: ::std::os::raw::c_int)
     -> *mut mxArray;
    pub fn mxGetNChars_730(pa: *const mxArray,
                           buf: *mut ::std::os::raw::c_char, nChars: size_t);
    pub fn mxGetNChars_700(pa: *const mxArray,
                           buf: *mut ::std::os::raw::c_char,
                           nChars: ::std::os::raw::c_int);
    pub fn mxGetString_730(pa: *const mxArray,
                           buf: *mut ::std::os::raw::c_char, buflen: size_t)
     -> ::std::os::raw::c_int;
    pub fn mxGetString_700(pa: *const mxArray,
                           buf: *mut ::std::os::raw::c_char,
                           buflen: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn mxArrayToString(pa: *const mxArray) -> *mut ::std::os::raw::c_char;
    pub fn mxArrayToUTF8String(pa: *const mxArray)
     -> *mut ::std::os::raw::c_char;
    pub fn mxCreateStringFromNChars_730(str: *const ::std::os::raw::c_char,
                                        n: size_t) -> *mut mxArray;
    pub fn mxCreateStringFromNChars_700(str: *const ::std::os::raw::c_char,
                                        n: ::std::os::raw::c_int)
     -> *mut mxArray;
    pub fn mxCreateString(str: *const ::std::os::raw::c_char) -> *mut mxArray;
    pub fn mxCreateCharMatrixFromStrings_730(m: size_t,
                                             str:
                                                 *mut *const ::std::os::raw::c_char)
     -> *mut mxArray;
    pub fn mxCreateCharMatrixFromStrings_700(m: ::std::os::raw::c_int,
                                             str:
                                                 *mut *const ::std::os::raw::c_char)
     -> *mut mxArray;
    pub fn mxCreateCellMatrix_730(m: size_t, n: size_t) -> *mut mxArray;
    pub fn mxCreateCellMatrix_700(m: ::std::os::raw::c_int,
                                  n: ::std::os::raw::c_int) -> *mut mxArray;
    pub fn mxCreateCellArray_730(ndim: size_t, dims: *const size_t)
     -> *mut mxArray;
    pub fn mxCreateCellArray_700(ndim: ::std::os::raw::c_int,
                                 dims: *const ::std::os::raw::c_int)
     -> *mut mxArray;
    pub fn mxCreateStructMatrix_730(m: size_t, n: size_t,
                                    nfields: ::std::os::raw::c_int,
                                    fieldnames:
                                        *mut *const ::std::os::raw::c_char)
     -> *mut mxArray;
    pub fn mxCreateStructMatrix_700(m: ::std::os::raw::c_int,
                                    n: ::std::os::raw::c_int,
                                    nfields: ::std::os::raw::c_int,
                                    fieldnames:
                                        *mut *const ::std::os::raw::c_char)
     -> *mut mxArray;
    pub fn mxCreateStructArray_730(ndim: size_t, dims: *const size_t,
                                   nfields: ::std::os::raw::c_int,
                                   fieldnames:
                                       *mut *const ::std::os::raw::c_char)
     -> *mut mxArray;
    pub fn mxCreateStructArray_700(ndim: ::std::os::raw::c_int,
                                   dims: *const ::std::os::raw::c_int,
                                   nfields: ::std::os::raw::c_int,
                                   fieldnames:
                                       *mut *const ::std::os::raw::c_char)
     -> *mut mxArray;
    pub fn mxDuplicateArray(in_: *const mxArray) -> *mut mxArray;
    pub fn mxSetClassName(pa: *mut mxArray,
                          classname: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn mxAddField(pa: *mut mxArray,
                      fieldname: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn mxRemoveField(pa: *mut mxArray, field: ::std::os::raw::c_int);
    pub fn mxGetEps() -> f64;
    pub fn mxGetInf() -> f64;
    pub fn mxGetNaN() -> f64;
    pub fn mxIsFinite(x: f64) -> bool_;
    pub fn mxIsInf(x: f64) -> bool_;
    pub fn mxIsNaN(x: f64) -> bool_;
    pub fn mexFunction(nlhs: ::std::os::raw::c_int, plhs: *mut *mut mxArray,
                       nrhs: ::std::os::raw::c_int,
                       prhs: *mut *const mxArray);
    pub fn __local_stdio_printf_options() -> *mut ::std::os::raw::c_ulonglong;
    pub fn __local_stdio_scanf_options() -> *mut ::std::os::raw::c_ulonglong;
    pub fn __acrt_iob_func(arg1: ::std::os::raw::c_uint) -> *mut FILE;
    pub fn fgetwc(_Stream: *mut FILE) -> wint_t;
    pub fn _fgetwchar() -> wint_t;
    pub fn fputwc(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
    pub fn _fputwchar(_Character: wchar_t) -> wint_t;
    pub fn getwc(_Stream: *mut FILE) -> wint_t;
    pub fn getwchar() -> wint_t;
    pub fn fgetws(_Buffer: *mut wchar_t, _BufferCount: ::std::os::raw::c_int,
                  _Stream: *mut FILE) -> *mut wchar_t;
    pub fn fputws(_Buffer: *const wchar_t, _Stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn _getws_s(_Buffer: *mut wchar_t, _BufferCount: size_t)
     -> *mut wchar_t;
    pub fn putwc(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
    pub fn putwchar(_Character: wchar_t) -> wint_t;
    pub fn _putws(_Buffer: *const wchar_t) -> ::std::os::raw::c_int;
    pub fn ungetwc(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
    pub fn _wfdopen(_FileHandle: ::std::os::raw::c_int, _Mode: *const wchar_t)
     -> *mut FILE;
    pub fn _wfopen(_FileName: *const wchar_t, _Mode: *const wchar_t)
     -> *mut FILE;
    pub fn _wfopen_s(_Stream: *mut *mut FILE, _FileName: *const wchar_t,
                     _Mode: *const wchar_t) -> errno_t;
    pub fn _wfreopen(_FileName: *const wchar_t, _Mode: *const wchar_t,
                     _OldStream: *mut FILE) -> *mut FILE;
    pub fn _wfreopen_s(_Stream: *mut *mut FILE, _FileName: *const wchar_t,
                       _Mode: *const wchar_t, _OldStream: *mut FILE)
     -> errno_t;
    pub fn _wfsopen(_FileName: *const wchar_t, _Mode: *const wchar_t,
                    _ShFlag: ::std::os::raw::c_int) -> *mut FILE;
    pub fn _wpopen(_Command: *const wchar_t, _Mode: *const wchar_t)
     -> *mut FILE;
    pub fn _wremove(_FileName: *const wchar_t) -> ::std::os::raw::c_int;
    pub fn _wtempnam(_Directory: *const wchar_t, _FilePrefix: *const wchar_t)
     -> *mut wchar_t;
    pub fn _wtmpnam_s(_Buffer: *mut wchar_t, _BufferCount: size_t) -> errno_t;
    pub fn _wtmpnam(_Buffer: *mut wchar_t) -> *mut wchar_t;
    pub fn _fgetwc_nolock(_Stream: *mut FILE) -> wint_t;
    pub fn _fputwc_nolock(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
    pub fn _getwc_nolock(_Stream: *mut FILE) -> wint_t;
    pub fn _putwc_nolock(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
    pub fn _ungetwc_nolock(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
    pub fn __stdio_common_vfwprintf(_Options: ::std::os::raw::c_ulonglong,
                                    _Stream: *mut FILE,
                                    _Format: *const wchar_t,
                                    _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn __stdio_common_vfwprintf_s(_Options: ::std::os::raw::c_ulonglong,
                                      _Stream: *mut FILE,
                                      _Format: *const wchar_t,
                                      _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn __stdio_common_vfwprintf_p(_Options: ::std::os::raw::c_ulonglong,
                                      _Stream: *mut FILE,
                                      _Format: *const wchar_t,
                                      _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn _vfwprintf_l(_Stream: *mut FILE, _Format: *const wchar_t,
                        _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn vfwprintf(_Stream: *mut FILE, _Format: *const wchar_t,
                     _ArgList: va_list) -> ::std::os::raw::c_int;
    pub fn _vfwprintf_s_l(_Stream: *mut FILE, _Format: *const wchar_t,
                          _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn vfwprintf_s(_Stream: *mut FILE, _Format: *const wchar_t,
                       _ArgList: va_list) -> ::std::os::raw::c_int;
    pub fn _vfwprintf_p_l(_Stream: *mut FILE, _Format: *const wchar_t,
                          _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn _vfwprintf_p(_Stream: *mut FILE, _Format: *const wchar_t,
                        _ArgList: va_list) -> ::std::os::raw::c_int;
    pub fn _vwprintf_l(_Format: *const wchar_t, _Locale: _locale_t,
                       _ArgList: va_list) -> ::std::os::raw::c_int;
    pub fn vwprintf(_Format: *const wchar_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn _vwprintf_s_l(_Format: *const wchar_t, _Locale: _locale_t,
                         _ArgList: va_list) -> ::std::os::raw::c_int;
    pub fn vwprintf_s(_Format: *const wchar_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn _vwprintf_p_l(_Format: *const wchar_t, _Locale: _locale_t,
                         _ArgList: va_list) -> ::std::os::raw::c_int;
    pub fn _vwprintf_p(_Format: *const wchar_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn _fwprintf_l(_Stream: *mut FILE, _Format: *const wchar_t,
                       _Locale: _locale_t, ...) -> ::std::os::raw::c_int;
    pub fn fwprintf(_Stream: *mut FILE, _Format: *const wchar_t, ...)
     -> ::std::os::raw::c_int;
    pub fn _fwprintf_s_l(_Stream: *mut FILE, _Format: *const wchar_t,
                         _Locale: _locale_t, ...) -> ::std::os::raw::c_int;
    pub fn fwprintf_s(_Stream: *mut FILE, _Format: *const wchar_t, ...)
     -> ::std::os::raw::c_int;
    pub fn _fwprintf_p_l(_Stream: *mut FILE, _Format: *const wchar_t,
                         _Locale: _locale_t, ...) -> ::std::os::raw::c_int;
    pub fn _fwprintf_p(_Stream: *mut FILE, _Format: *const wchar_t, ...)
     -> ::std::os::raw::c_int;
    pub fn _wprintf_l(_Format: *const wchar_t, _Locale: _locale_t, ...)
     -> ::std::os::raw::c_int;
    pub fn wprintf(_Format: *const wchar_t, ...) -> ::std::os::raw::c_int;
    pub fn _wprintf_s_l(_Format: *const wchar_t, _Locale: _locale_t, ...)
     -> ::std::os::raw::c_int;
    pub fn wprintf_s(_Format: *const wchar_t, ...) -> ::std::os::raw::c_int;
    pub fn _wprintf_p_l(_Format: *const wchar_t, _Locale: _locale_t, ...)
     -> ::std::os::raw::c_int;
    pub fn _wprintf_p(_Format: *const wchar_t, ...) -> ::std::os::raw::c_int;
    pub fn __stdio_common_vfwscanf(_Options: ::std::os::raw::c_ulonglong,
                                   _Stream: *mut FILE,
                                   _Format: *const wchar_t,
                                   _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn _vfwscanf_l(_Stream: *mut FILE, _Format: *const wchar_t,
                       _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn vfwscanf(_Stream: *mut FILE, _Format: *const wchar_t,
                    _ArgList: va_list) -> ::std::os::raw::c_int;
    pub fn _vfwscanf_s_l(_Stream: *mut FILE, _Format: *const wchar_t,
                         _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn vfwscanf_s(_Stream: *mut FILE, _Format: *const wchar_t,
                      _ArgList: va_list) -> ::std::os::raw::c_int;
    pub fn _vwscanf_l(_Format: *const wchar_t, _Locale: _locale_t,
                      _ArgList: va_list) -> ::std::os::raw::c_int;
    pub fn vwscanf(_Format: *const wchar_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn _vwscanf_s_l(_Format: *const wchar_t, _Locale: _locale_t,
                        _ArgList: va_list) -> ::std::os::raw::c_int;
    pub fn vwscanf_s(_Format: *const wchar_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn _fwscanf_l(_Stream: *mut FILE, _Format: *const wchar_t,
                      _Locale: _locale_t, ...) -> ::std::os::raw::c_int;
    pub fn fwscanf(_Stream: *mut FILE, _Format: *const wchar_t, ...)
     -> ::std::os::raw::c_int;
    pub fn _fwscanf_s_l(_Stream: *mut FILE, _Format: *const wchar_t,
                        _Locale: _locale_t, ...) -> ::std::os::raw::c_int;
    pub fn fwscanf_s(_Stream: *mut FILE, _Format: *const wchar_t, ...)
     -> ::std::os::raw::c_int;
    pub fn _wscanf_l(_Format: *const wchar_t, _Locale: _locale_t, ...)
     -> ::std::os::raw::c_int;
    pub fn wscanf(_Format: *const wchar_t, ...) -> ::std::os::raw::c_int;
    pub fn _wscanf_s_l(_Format: *const wchar_t, _Locale: _locale_t, ...)
     -> ::std::os::raw::c_int;
    pub fn wscanf_s(_Format: *const wchar_t, ...) -> ::std::os::raw::c_int;
    pub fn __stdio_common_vswprintf(_Options: ::std::os::raw::c_ulonglong,
                                    _Buffer: *mut wchar_t,
                                    _BufferCount: size_t,
                                    _Format: *const wchar_t,
                                    _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn __stdio_common_vswprintf_s(_Options: ::std::os::raw::c_ulonglong,
                                      _Buffer: *mut wchar_t,
                                      _BufferCount: size_t,
                                      _Format: *const wchar_t,
                                      _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn __stdio_common_vsnwprintf_s(_Options: ::std::os::raw::c_ulonglong,
                                       _Buffer: *mut wchar_t,
                                       _BufferCount: size_t,
                                       _MaxCount: size_t,
                                       _Format: *const wchar_t,
                                       _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn __stdio_common_vswprintf_p(_Options: ::std::os::raw::c_ulonglong,
                                      _Buffer: *mut wchar_t,
                                      _BufferCount: size_t,
                                      _Format: *const wchar_t,
                                      _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn _vsnwprintf_l(_Buffer: *mut wchar_t, _BufferCount: size_t,
                         _Format: *const wchar_t, _Locale: _locale_t,
                         _ArgList: va_list) -> ::std::os::raw::c_int;
    pub fn _vsnwprintf_s_l(_Buffer: *mut wchar_t, _BufferCount: size_t,
                           _MaxCount: size_t, _Format: *const wchar_t,
                           _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn _vsnwprintf_s(_Buffer: *mut wchar_t, _BufferCount: size_t,
                         _MaxCount: size_t, _Format: *const wchar_t,
                         _ArgList: va_list) -> ::std::os::raw::c_int;
    pub fn _snwprintf(_Buffer: *mut wchar_t, _BufferCount: size_t,
                      _Format: *const wchar_t, ...) -> ::std::os::raw::c_int;
    pub fn _vsnwprintf(_Buffer: *mut wchar_t, _BufferCount: size_t,
                       _Format: *const wchar_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn _vswprintf_c_l(_Buffer: *mut wchar_t, _BufferCount: size_t,
                          _Format: *const wchar_t, _Locale: _locale_t,
                          _ArgList: va_list) -> ::std::os::raw::c_int;
    pub fn _vswprintf_c(_Buffer: *mut wchar_t, _BufferCount: size_t,
                        _Format: *const wchar_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn _vswprintf_l(_Buffer: *mut wchar_t, _BufferCount: size_t,
                        _Format: *const wchar_t, _Locale: _locale_t,
                        _ArgList: va_list) -> ::std::os::raw::c_int;
    pub fn __vswprintf_l(_Buffer: *mut wchar_t, _Format: *const wchar_t,
                         _Locale: _locale_t, _Args: va_list)
     -> ::std::os::raw::c_int;
    pub fn _vswprintf(_Buffer: *mut wchar_t, _Format: *const wchar_t,
                      _Args: va_list) -> ::std::os::raw::c_int;
    pub fn vswprintf(_Buffer: *mut wchar_t, _BufferCount: size_t,
                     _Format: *const wchar_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn _vswprintf_s_l(_Buffer: *mut wchar_t, _BufferCount: size_t,
                          _Format: *const wchar_t, _Locale: _locale_t,
                          _ArgList: va_list) -> ::std::os::raw::c_int;
    pub fn vswprintf_s(_Buffer: *mut wchar_t, _BufferCount: size_t,
                       _Format: *const wchar_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn _vswprintf_p_l(_Buffer: *mut wchar_t, _BufferCount: size_t,
                          _Format: *const wchar_t, _Locale: _locale_t,
                          _ArgList: va_list) -> ::std::os::raw::c_int;
    pub fn _vswprintf_p(_Buffer: *mut wchar_t, _BufferCount: size_t,
                        _Format: *const wchar_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn _vscwprintf_l(_Format: *const wchar_t, _Locale: _locale_t,
                         _ArgList: va_list) -> ::std::os::raw::c_int;
    pub fn _vscwprintf(_Format: *const wchar_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn _vscwprintf_p_l(_Format: *const wchar_t, _Locale: _locale_t,
                           _ArgList: va_list) -> ::std::os::raw::c_int;
    pub fn _vscwprintf_p(_Format: *const wchar_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn __swprintf_l(_Buffer: *mut wchar_t, _Format: *const wchar_t,
                        _Locale: _locale_t, ...) -> ::std::os::raw::c_int;
    pub fn _swprintf_l(_Buffer: *mut wchar_t, _BufferCount: size_t,
                       _Format: *const wchar_t, _Locale: _locale_t, ...)
     -> ::std::os::raw::c_int;
    pub fn _swprintf(_Buffer: *mut wchar_t, _Format: *const wchar_t, ...)
     -> ::std::os::raw::c_int;
    pub fn swprintf(_Buffer: *mut wchar_t, _BufferCount: size_t,
                    _Format: *const wchar_t, ...) -> ::std::os::raw::c_int;
    pub fn _swprintf_s_l(_Buffer: *mut wchar_t, _BufferCount: size_t,
                         _Format: *const wchar_t, _Locale: _locale_t, ...)
     -> ::std::os::raw::c_int;
    pub fn swprintf_s(_Buffer: *mut wchar_t, _BufferCount: size_t,
                      _Format: *const wchar_t, ...) -> ::std::os::raw::c_int;
    pub fn _swprintf_p_l(_Buffer: *mut wchar_t, _BufferCount: size_t,
                         _Format: *const wchar_t, _Locale: _locale_t, ...)
     -> ::std::os::raw::c_int;
    pub fn _swprintf_p(_Buffer: *mut wchar_t, _BufferCount: size_t,
                       _Format: *const wchar_t, ...) -> ::std::os::raw::c_int;
    pub fn _swprintf_c_l(_Buffer: *mut wchar_t, _BufferCount: size_t,
                         _Format: *const wchar_t, _Locale: _locale_t, ...)
     -> ::std::os::raw::c_int;
    pub fn _swprintf_c(_Buffer: *mut wchar_t, _BufferCount: size_t,
                       _Format: *const wchar_t, ...) -> ::std::os::raw::c_int;
    pub fn _snwprintf_l(_Buffer: *mut wchar_t, _BufferCount: size_t,
                        _Format: *const wchar_t, _Locale: _locale_t, ...)
     -> ::std::os::raw::c_int;
    pub fn _snwprintf_s_l(_Buffer: *mut wchar_t, _BufferCount: size_t,
                          _MaxCount: size_t, _Format: *const wchar_t,
                          _Locale: _locale_t, ...) -> ::std::os::raw::c_int;
    pub fn _snwprintf_s(_Buffer: *mut wchar_t, _BufferCount: size_t,
                        _MaxCount: size_t, _Format: *const wchar_t, ...)
     -> ::std::os::raw::c_int;
    pub fn _scwprintf_l(_Format: *const wchar_t, _Locale: _locale_t, ...)
     -> ::std::os::raw::c_int;
    pub fn _scwprintf(_Format: *const wchar_t, ...) -> ::std::os::raw::c_int;
    pub fn _scwprintf_p_l(_Format: *const wchar_t, _Locale: _locale_t, ...)
     -> ::std::os::raw::c_int;
    pub fn _scwprintf_p(_Format: *const wchar_t, ...)
     -> ::std::os::raw::c_int;
    pub fn __stdio_common_vswscanf(_Options: ::std::os::raw::c_ulonglong,
                                   _Buffer: *const wchar_t,
                                   _BufferCount: size_t,
                                   _Format: *const wchar_t,
                                   _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn _vswscanf_l(_Buffer: *const wchar_t, _Format: *const wchar_t,
                       _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn vswscanf(_Buffer: *const wchar_t, _Format: *const wchar_t,
                    _ArgList: va_list) -> ::std::os::raw::c_int;
    pub fn _vswscanf_s_l(_Buffer: *const wchar_t, _Format: *const wchar_t,
                         _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn vswscanf_s(_Buffer: *const wchar_t, _Format: *const wchar_t,
                      _ArgList: va_list) -> ::std::os::raw::c_int;
    pub fn _vsnwscanf_l(_Buffer: *const wchar_t, _BufferCount: size_t,
                        _Format: *const wchar_t, _Locale: _locale_t,
                        _ArgList: va_list) -> ::std::os::raw::c_int;
    pub fn _vsnwscanf_s_l(_Buffer: *const wchar_t, _BufferCount: size_t,
                          _Format: *const wchar_t, _Locale: _locale_t,
                          _ArgList: va_list) -> ::std::os::raw::c_int;
    pub fn _swscanf_l(_Buffer: *const wchar_t, _Format: *const wchar_t,
                      _Locale: _locale_t, ...) -> ::std::os::raw::c_int;
    pub fn swscanf(_Buffer: *const wchar_t, _Format: *const wchar_t, ...)
     -> ::std::os::raw::c_int;
    pub fn _swscanf_s_l(_Buffer: *const wchar_t, _Format: *const wchar_t,
                        _Locale: _locale_t, ...) -> ::std::os::raw::c_int;
    pub fn swscanf_s(_Buffer: *const wchar_t, _Format: *const wchar_t, ...)
     -> ::std::os::raw::c_int;
    pub fn _snwscanf_l(_Buffer: *const wchar_t, _BufferCount: size_t,
                       _Format: *const wchar_t, _Locale: _locale_t, ...)
     -> ::std::os::raw::c_int;
    pub fn _snwscanf(_Buffer: *const wchar_t, _BufferCount: size_t,
                     _Format: *const wchar_t, ...) -> ::std::os::raw::c_int;
    pub fn _snwscanf_s_l(_Buffer: *const wchar_t, _BufferCount: size_t,
                         _Format: *const wchar_t, _Locale: _locale_t, ...)
     -> ::std::os::raw::c_int;
    pub fn _snwscanf_s(_Buffer: *const wchar_t, _BufferCount: size_t,
                       _Format: *const wchar_t, ...) -> ::std::os::raw::c_int;
    pub fn _get_stream_buffer_pointers(_Stream: *mut FILE,
                                       _Base:
                                           *mut *mut *mut ::std::os::raw::c_char,
                                       _Pointer:
                                           *mut *mut *mut ::std::os::raw::c_char,
                                       _Count:
                                           *mut *mut ::std::os::raw::c_int)
     -> errno_t;
    pub fn clearerr_s(_Stream: *mut FILE) -> errno_t;
    pub fn fopen_s(_Stream: *mut *mut FILE,
                   _FileName: *const ::std::os::raw::c_char,
                   _Mode: *const ::std::os::raw::c_char) -> errno_t;
    pub fn fread_s(_Buffer: *mut ::std::os::raw::c_void, _BufferSize: size_t,
                   _ElementSize: size_t, _ElementCount: size_t,
                   _Stream: *mut FILE) -> size_t;
    pub fn freopen_s(_Stream: *mut *mut FILE,
                     _FileName: *const ::std::os::raw::c_char,
                     _Mode: *const ::std::os::raw::c_char,
                     _OldStream: *mut FILE) -> errno_t;
    pub fn gets_s(_Buffer: *mut ::std::os::raw::c_char, _Size: rsize_t)
     -> *mut ::std::os::raw::c_char;
    pub fn tmpfile_s(_Stream: *mut *mut FILE) -> errno_t;
    pub fn tmpnam_s(_Buffer: *mut ::std::os::raw::c_char, _Size: rsize_t)
     -> errno_t;
    pub fn clearerr(_Stream: *mut FILE);
    pub fn fclose(_Stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn _fcloseall() -> ::std::os::raw::c_int;
    pub fn _fdopen(_FileHandle: ::std::os::raw::c_int,
                   _Mode: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn feof(_Stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ferror(_Stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fflush(_Stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fgetc(_Stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn _fgetchar() -> ::std::os::raw::c_int;
    pub fn fgetpos(_Stream: *mut FILE, _Position: *mut fpos_t)
     -> ::std::os::raw::c_int;
    pub fn fgets(_Buffer: *mut ::std::os::raw::c_char,
                 _MaxCount: ::std::os::raw::c_int, _Stream: *mut FILE)
     -> *mut ::std::os::raw::c_char;
    pub fn _fileno(_Stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn _flushall() -> ::std::os::raw::c_int;
    pub fn fopen(_FileName: *const ::std::os::raw::c_char,
                 _Mode: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn fputc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn _fputchar(_Character: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn fputs(_Buffer: *const ::std::os::raw::c_char, _Stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn fread(_Buffer: *mut ::std::os::raw::c_void, _ElementSize: size_t,
                 _ElementCount: size_t, _Stream: *mut FILE) -> size_t;
    pub fn freopen(_FileName: *const ::std::os::raw::c_char,
                   _Mode: *const ::std::os::raw::c_char, _Stream: *mut FILE)
     -> *mut FILE;
    pub fn _fsopen(_FileName: *const ::std::os::raw::c_char,
                   _Mode: *const ::std::os::raw::c_char,
                   _ShFlag: ::std::os::raw::c_int) -> *mut FILE;
    pub fn fsetpos(_Stream: *mut FILE, _Position: *const fpos_t)
     -> ::std::os::raw::c_int;
    pub fn fseek(_Stream: *mut FILE, _Offset: ::std::os::raw::c_long,
                 _Origin: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn _fseeki64(_Stream: *mut FILE, _Offset: ::std::os::raw::c_longlong,
                     _Origin: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ftell(_Stream: *mut FILE) -> ::std::os::raw::c_long;
    pub fn _ftelli64(_Stream: *mut FILE) -> ::std::os::raw::c_longlong;
    pub fn fwrite(_Buffer: *const ::std::os::raw::c_void,
                  _ElementSize: size_t, _ElementCount: size_t,
                  _Stream: *mut FILE) -> size_t;
    pub fn getc(_Stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getchar() -> ::std::os::raw::c_int;
    pub fn _getmaxstdio() -> ::std::os::raw::c_int;
    pub fn _getw(_Stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn _pclose(_Stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn _popen(_Command: *const ::std::os::raw::c_char,
                  _Mode: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn putc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putchar(_Character: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn puts(_Buffer: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn _putw(_Word: ::std::os::raw::c_int, _Stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn remove(_FileName: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn rename(_OldFileName: *const ::std::os::raw::c_char,
                  _NewFileName: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn _unlink(_FileName: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn unlink(_FileName: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn rewind(_Stream: *mut FILE);
    pub fn _rmtmp() -> ::std::os::raw::c_int;
    pub fn setbuf(_Stream: *mut FILE, _Buffer: *mut ::std::os::raw::c_char);
    pub fn _setmaxstdio(_Maximum: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn setvbuf(_Stream: *mut FILE, _Buffer: *mut ::std::os::raw::c_char,
                   _Mode: ::std::os::raw::c_int, _Size: size_t)
     -> ::std::os::raw::c_int;
    pub fn _tempnam(_DirectoryName: *const ::std::os::raw::c_char,
                    _FilePrefix: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn tmpfile() -> *mut FILE;
    pub fn tmpnam(_Buffer: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn ungetc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn _lock_file(_Stream: *mut FILE);
    pub fn _unlock_file(_Stream: *mut FILE);
    pub fn _fclose_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn _fflush_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn _fgetc_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn _fputc_nolock(_Character: ::std::os::raw::c_int,
                         _Stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn _fread_nolock(_Buffer: *mut ::std::os::raw::c_void,
                         _ElementSize: size_t, _ElementCount: size_t,
                         _Stream: *mut FILE) -> size_t;
    pub fn _fread_nolock_s(_Buffer: *mut ::std::os::raw::c_void,
                           _BufferSize: size_t, _ElementSize: size_t,
                           _ElementCount: size_t, _Stream: *mut FILE)
     -> size_t;
    pub fn _fseek_nolock(_Stream: *mut FILE, _Offset: ::std::os::raw::c_long,
                         _Origin: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn _fseeki64_nolock(_Stream: *mut FILE,
                            _Offset: ::std::os::raw::c_longlong,
                            _Origin: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn _ftell_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_long;
    pub fn _ftelli64_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_longlong;
    pub fn _fwrite_nolock(_Buffer: *const ::std::os::raw::c_void,
                          _ElementSize: size_t, _ElementCount: size_t,
                          _Stream: *mut FILE) -> size_t;
    pub fn _getc_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn _putc_nolock(_Character: ::std::os::raw::c_int, _Stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn _ungetc_nolock(_Character: ::std::os::raw::c_int,
                          _Stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn __p__commode() -> *mut ::std::os::raw::c_int;
    pub fn __stdio_common_vfprintf(_Options: ::std::os::raw::c_ulonglong,
                                   _Stream: *mut FILE,
                                   _Format: *const ::std::os::raw::c_char,
                                   _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn __stdio_common_vfprintf_s(_Options: ::std::os::raw::c_ulonglong,
                                     _Stream: *mut FILE,
                                     _Format: *const ::std::os::raw::c_char,
                                     _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn __stdio_common_vfprintf_p(_Options: ::std::os::raw::c_ulonglong,
                                     _Stream: *mut FILE,
                                     _Format: *const ::std::os::raw::c_char,
                                     _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn _vfprintf_l(_Stream: *mut FILE,
                       _Format: *const ::std::os::raw::c_char,
                       _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn vfprintf(_Stream: *mut FILE,
                    _Format: *const ::std::os::raw::c_char, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn _vfprintf_s_l(_Stream: *mut FILE,
                         _Format: *const ::std::os::raw::c_char,
                         _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn vfprintf_s(_Stream: *mut FILE,
                      _Format: *const ::std::os::raw::c_char,
                      _ArgList: va_list) -> ::std::os::raw::c_int;
    pub fn _vfprintf_p_l(_Stream: *mut FILE,
                         _Format: *const ::std::os::raw::c_char,
                         _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn _vfprintf_p(_Stream: *mut FILE,
                       _Format: *const ::std::os::raw::c_char,
                       _ArgList: va_list) -> ::std::os::raw::c_int;
    pub fn _vprintf_l(_Format: *const ::std::os::raw::c_char,
                      _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn vprintf(_Format: *const ::std::os::raw::c_char, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn _vprintf_s_l(_Format: *const ::std::os::raw::c_char,
                        _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn vprintf_s(_Format: *const ::std::os::raw::c_char,
                     _ArgList: va_list) -> ::std::os::raw::c_int;
    pub fn _vprintf_p_l(_Format: *const ::std::os::raw::c_char,
                        _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn _vprintf_p(_Format: *const ::std::os::raw::c_char,
                      _ArgList: va_list) -> ::std::os::raw::c_int;
    pub fn _fprintf_l(_Stream: *mut FILE,
                      _Format: *const ::std::os::raw::c_char,
                      _Locale: _locale_t, ...) -> ::std::os::raw::c_int;
    pub fn fprintf(_Stream: *mut FILE,
                   _Format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn _set_printf_count_output(_Value: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn _get_printf_count_output() -> ::std::os::raw::c_int;
    pub fn _fprintf_s_l(_Stream: *mut FILE,
                        _Format: *const ::std::os::raw::c_char,
                        _Locale: _locale_t, ...) -> ::std::os::raw::c_int;
    pub fn fprintf_s(_Stream: *mut FILE,
                     _Format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn _fprintf_p_l(_Stream: *mut FILE,
                        _Format: *const ::std::os::raw::c_char,
                        _Locale: _locale_t, ...) -> ::std::os::raw::c_int;
    pub fn _fprintf_p(_Stream: *mut FILE,
                      _Format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn _printf_l(_Format: *const ::std::os::raw::c_char,
                     _Locale: _locale_t, ...) -> ::std::os::raw::c_int;
    pub fn printf(_Format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn _printf_s_l(_Format: *const ::std::os::raw::c_char,
                       _Locale: _locale_t, ...) -> ::std::os::raw::c_int;
    pub fn printf_s(_Format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn _printf_p_l(_Format: *const ::std::os::raw::c_char,
                       _Locale: _locale_t, ...) -> ::std::os::raw::c_int;
    pub fn _printf_p(_Format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn __stdio_common_vfscanf(_Options: ::std::os::raw::c_ulonglong,
                                  _Stream: *mut FILE,
                                  _Format: *const ::std::os::raw::c_char,
                                  _Locale: _locale_t, _Arglist: va_list)
     -> ::std::os::raw::c_int;
    pub fn _vfscanf_l(_Stream: *mut FILE,
                      _Format: *const ::std::os::raw::c_char,
                      _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn vfscanf(_Stream: *mut FILE, _Format: *const ::std::os::raw::c_char,
                   _ArgList: va_list) -> ::std::os::raw::c_int;
    pub fn _vfscanf_s_l(_Stream: *mut FILE,
                        _Format: *const ::std::os::raw::c_char,
                        _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn vfscanf_s(_Stream: *mut FILE,
                     _Format: *const ::std::os::raw::c_char,
                     _ArgList: va_list) -> ::std::os::raw::c_int;
    pub fn _vscanf_l(_Format: *const ::std::os::raw::c_char,
                     _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn vscanf(_Format: *const ::std::os::raw::c_char, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn _vscanf_s_l(_Format: *const ::std::os::raw::c_char,
                       _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn vscanf_s(_Format: *const ::std::os::raw::c_char, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn _fscanf_l(_Stream: *mut FILE,
                     _Format: *const ::std::os::raw::c_char,
                     _Locale: _locale_t, ...) -> ::std::os::raw::c_int;
    pub fn fscanf(_Stream: *mut FILE,
                  _Format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn _fscanf_s_l(_Stream: *mut FILE,
                       _Format: *const ::std::os::raw::c_char,
                       _Locale: _locale_t, ...) -> ::std::os::raw::c_int;
    pub fn fscanf_s(_Stream: *mut FILE,
                    _Format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn _scanf_l(_Format: *const ::std::os::raw::c_char,
                    _Locale: _locale_t, ...) -> ::std::os::raw::c_int;
    pub fn scanf(_Format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn _scanf_s_l(_Format: *const ::std::os::raw::c_char,
                      _Locale: _locale_t, ...) -> ::std::os::raw::c_int;
    pub fn scanf_s(_Format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn __stdio_common_vsprintf(_Options: ::std::os::raw::c_ulonglong,
                                   _Buffer: *mut ::std::os::raw::c_char,
                                   _BufferCount: size_t,
                                   _Format: *const ::std::os::raw::c_char,
                                   _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn __stdio_common_vsprintf_s(_Options: ::std::os::raw::c_ulonglong,
                                     _Buffer: *mut ::std::os::raw::c_char,
                                     _BufferCount: size_t,
                                     _Format: *const ::std::os::raw::c_char,
                                     _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn __stdio_common_vsnprintf_s(_Options: ::std::os::raw::c_ulonglong,
                                      _Buffer: *mut ::std::os::raw::c_char,
                                      _BufferCount: size_t, _MaxCount: size_t,
                                      _Format: *const ::std::os::raw::c_char,
                                      _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn __stdio_common_vsprintf_p(_Options: ::std::os::raw::c_ulonglong,
                                     _Buffer: *mut ::std::os::raw::c_char,
                                     _BufferCount: size_t,
                                     _Format: *const ::std::os::raw::c_char,
                                     _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn _vsnprintf_l(_Buffer: *mut ::std::os::raw::c_char,
                        _BufferCount: size_t,
                        _Format: *const ::std::os::raw::c_char,
                        _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn _vsnprintf(_Buffer: *mut ::std::os::raw::c_char,
                      _BufferCount: size_t,
                      _Format: *const ::std::os::raw::c_char, _Args: va_list)
     -> ::std::os::raw::c_int;
    pub fn vsnprintf(_Buffer: *mut ::std::os::raw::c_char,
                     _BufferCount: size_t,
                     _Format: *const ::std::os::raw::c_char,
                     _ArgList: va_list) -> ::std::os::raw::c_int;
    pub fn _vsprintf_l(_Buffer: *mut ::std::os::raw::c_char,
                       _Format: *const ::std::os::raw::c_char,
                       _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn vsprintf(_Buffer: *mut ::std::os::raw::c_char,
                    _Format: *const ::std::os::raw::c_char, _Args: va_list)
     -> ::std::os::raw::c_int;
    pub fn _vsprintf_s_l(_Buffer: *mut ::std::os::raw::c_char,
                         _BufferCount: size_t,
                         _Format: *const ::std::os::raw::c_char,
                         _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn vsprintf_s(_Buffer: *mut ::std::os::raw::c_char,
                      _BufferCount: size_t,
                      _Format: *const ::std::os::raw::c_char,
                      _ArgList: va_list) -> ::std::os::raw::c_int;
    pub fn _vsprintf_p_l(_Buffer: *mut ::std::os::raw::c_char,
                         _BufferCount: size_t,
                         _Format: *const ::std::os::raw::c_char,
                         _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn _vsprintf_p(_Buffer: *mut ::std::os::raw::c_char,
                       _BufferCount: size_t,
                       _Format: *const ::std::os::raw::c_char,
                       _ArgList: va_list) -> ::std::os::raw::c_int;
    pub fn _vsnprintf_s_l(_Buffer: *mut ::std::os::raw::c_char,
                          _BufferCount: size_t, _MaxCount: size_t,
                          _Format: *const ::std::os::raw::c_char,
                          _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn _vsnprintf_s(_Buffer: *mut ::std::os::raw::c_char,
                        _BufferCount: size_t, _MaxCount: size_t,
                        _Format: *const ::std::os::raw::c_char,
                        _ArgList: va_list) -> ::std::os::raw::c_int;
    pub fn vsnprintf_s(_Buffer: *mut ::std::os::raw::c_char,
                       _BufferCount: size_t, _MaxCount: size_t,
                       _Format: *const ::std::os::raw::c_char,
                       _ArgList: va_list) -> ::std::os::raw::c_int;
    pub fn _vscprintf_l(_Format: *const ::std::os::raw::c_char,
                        _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn _vscprintf(_Format: *const ::std::os::raw::c_char,
                      _ArgList: va_list) -> ::std::os::raw::c_int;
    pub fn _vscprintf_p_l(_Format: *const ::std::os::raw::c_char,
                          _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn _vscprintf_p(_Format: *const ::std::os::raw::c_char,
                        _ArgList: va_list) -> ::std::os::raw::c_int;
    pub fn _vsnprintf_c_l(_Buffer: *mut ::std::os::raw::c_char,
                          _BufferCount: size_t,
                          _Format: *const ::std::os::raw::c_char,
                          _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn _vsnprintf_c(_Buffer: *mut ::std::os::raw::c_char,
                        _BufferCount: size_t,
                        _Format: *const ::std::os::raw::c_char,
                        _ArgList: va_list) -> ::std::os::raw::c_int;
    pub fn _sprintf_l(_Buffer: *mut ::std::os::raw::c_char,
                      _Format: *const ::std::os::raw::c_char,
                      _Locale: _locale_t, ...) -> ::std::os::raw::c_int;
    pub fn sprintf(_Buffer: *mut ::std::os::raw::c_char,
                   _Format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn _sprintf_s_l(_Buffer: *mut ::std::os::raw::c_char,
                        _BufferCount: size_t,
                        _Format: *const ::std::os::raw::c_char,
                        _Locale: _locale_t, ...) -> ::std::os::raw::c_int;
    pub fn sprintf_s(_Buffer: *mut ::std::os::raw::c_char,
                     _BufferCount: size_t,
                     _Format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn _sprintf_p_l(_Buffer: *mut ::std::os::raw::c_char,
                        _BufferCount: size_t,
                        _Format: *const ::std::os::raw::c_char,
                        _Locale: _locale_t, ...) -> ::std::os::raw::c_int;
    pub fn _sprintf_p(_Buffer: *mut ::std::os::raw::c_char,
                      _BufferCount: size_t,
                      _Format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn _snprintf_l(_Buffer: *mut ::std::os::raw::c_char,
                       _BufferCount: size_t,
                       _Format: *const ::std::os::raw::c_char,
                       _Locale: _locale_t, ...) -> ::std::os::raw::c_int;
    pub fn snprintf(_Buffer: *mut ::std::os::raw::c_char,
                    _BufferCount: size_t,
                    _Format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn _snprintf(_Buffer: *mut ::std::os::raw::c_char,
                     _BufferCount: size_t,
                     _Format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn _snprintf_c_l(_Buffer: *mut ::std::os::raw::c_char,
                         _BufferCount: size_t,
                         _Format: *const ::std::os::raw::c_char,
                         _Locale: _locale_t, ...) -> ::std::os::raw::c_int;
    pub fn _snprintf_c(_Buffer: *mut ::std::os::raw::c_char,
                       _BufferCount: size_t,
                       _Format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn _snprintf_s_l(_Buffer: *mut ::std::os::raw::c_char,
                         _BufferCount: size_t, _MaxCount: size_t,
                         _Format: *const ::std::os::raw::c_char,
                         _Locale: _locale_t, ...) -> ::std::os::raw::c_int;
    pub fn _snprintf_s(_Buffer: *mut ::std::os::raw::c_char,
                       _BufferCount: size_t, _MaxCount: size_t,
                       _Format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn _scprintf_l(_Format: *const ::std::os::raw::c_char,
                       _Locale: _locale_t, ...) -> ::std::os::raw::c_int;
    pub fn _scprintf(_Format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn _scprintf_p_l(_Format: *const ::std::os::raw::c_char,
                         _Locale: _locale_t, ...) -> ::std::os::raw::c_int;
    pub fn _scprintf_p(_Format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn __stdio_common_vsscanf(_Options: ::std::os::raw::c_ulonglong,
                                  _Buffer: *const ::std::os::raw::c_char,
                                  _BufferCount: size_t,
                                  _Format: *const ::std::os::raw::c_char,
                                  _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn _vsscanf_l(_Buffer: *const ::std::os::raw::c_char,
                      _Format: *const ::std::os::raw::c_char,
                      _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn vsscanf(_Buffer: *const ::std::os::raw::c_char,
                   _Format: *const ::std::os::raw::c_char, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn _vsscanf_s_l(_Buffer: *const ::std::os::raw::c_char,
                        _Format: *const ::std::os::raw::c_char,
                        _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
    pub fn vsscanf_s(_Buffer: *const ::std::os::raw::c_char,
                     _Format: *const ::std::os::raw::c_char,
                     _ArgList: va_list) -> ::std::os::raw::c_int;
    pub fn _sscanf_l(_Buffer: *const ::std::os::raw::c_char,
                     _Format: *const ::std::os::raw::c_char,
                     _Locale: _locale_t, ...) -> ::std::os::raw::c_int;
    pub fn sscanf(_Buffer: *const ::std::os::raw::c_char,
                  _Format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn _sscanf_s_l(_Buffer: *const ::std::os::raw::c_char,
                       _Format: *const ::std::os::raw::c_char,
                       _Locale: _locale_t, ...) -> ::std::os::raw::c_int;
    pub fn sscanf_s(_Buffer: *const ::std::os::raw::c_char,
                    _Format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn _snscanf_l(_Buffer: *const ::std::os::raw::c_char,
                      _BufferCount: size_t,
                      _Format: *const ::std::os::raw::c_char,
                      _Locale: _locale_t, ...) -> ::std::os::raw::c_int;
    pub fn _snscanf(_Buffer: *const ::std::os::raw::c_char,
                    _BufferCount: size_t,
                    _Format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn _snscanf_s_l(_Buffer: *const ::std::os::raw::c_char,
                        _BufferCount: size_t,
                        _Format: *const ::std::os::raw::c_char,
                        _Locale: _locale_t, ...) -> ::std::os::raw::c_int;
    pub fn _snscanf_s(_Buffer: *const ::std::os::raw::c_char,
                      _BufferCount: size_t,
                      _Format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn tempnam(_Directory: *const ::std::os::raw::c_char,
                   _FilePrefix: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn fcloseall() -> ::std::os::raw::c_int;
    pub fn fdopen(_FileHandle: ::std::os::raw::c_int,
                  _Format: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn fgetchar() -> ::std::os::raw::c_int;
    pub fn fileno(_Stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn flushall() -> ::std::os::raw::c_int;
    pub fn fputchar(_Ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn getw(_Stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn putw(_Ch: ::std::os::raw::c_int, _Stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn rmtmp() -> ::std::os::raw::c_int;
    pub fn mexErrMsgTxt(error_msg: *const ::std::os::raw::c_char);
    pub fn mexErrMsgIdAndTxt(identifier: *const ::std::os::raw::c_char,
                             err_msg: *const ::std::os::raw::c_char, ...);
    pub fn mexWarnMsgTxt(warn_msg: *const ::std::os::raw::c_char);
    pub fn mexWarnMsgIdAndTxt(identifier: *const ::std::os::raw::c_char,
                              warn_msg: *const ::std::os::raw::c_char, ...);
    pub fn mexPrintf(fmt: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn mexMakeArrayPersistent(pa: *mut mxArray);
    pub fn mexMakeMemoryPersistent(ptr: *mut ::std::os::raw::c_void);
    pub fn mexCallMATLAB(nlhs: ::std::os::raw::c_int, plhs: *mut *mut mxArray,
                         nrhs: ::std::os::raw::c_int, prhs: *mut *mut mxArray,
                         fcn_name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn mexCallMATLABWithObject(nlhs: ::std::os::raw::c_int,
                                   plhs: *mut *mut mxArray,
                                   nrhs: ::std::os::raw::c_int,
                                   prhs: *mut *mut mxArray,
                                   fcn_name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn mexCallMATLABWithTrap(nlhs: ::std::os::raw::c_int,
                                 plhs: *mut *mut mxArray,
                                 nrhs: ::std::os::raw::c_int,
                                 prhs: *mut *mut mxArray,
                                 fcn_name: *const ::std::os::raw::c_char)
     -> *mut mxArray;
    pub fn mexCallMATLABWithTrapWithObject(nlhs: ::std::os::raw::c_int,
                                           plhs: *mut *mut mxArray,
                                           nrhs: ::std::os::raw::c_int,
                                           prhs: *mut *mut mxArray,
                                           fcn_name:
                                               *const ::std::os::raw::c_char)
     -> *mut mxArray;
    pub fn mexSetTrapFlag(flag: ::std::os::raw::c_int);
    pub fn mexPrintAssertion(test: *const ::std::os::raw::c_char,
                             fname: *const ::std::os::raw::c_char,
                             linenum: ::std::os::raw::c_int,
                             message: *const ::std::os::raw::c_char);
    pub fn mexIsGlobal(pA: *const mxArray) -> bool_;
    pub fn mexPutVariable(workspace: *const ::std::os::raw::c_char,
                          name: *const ::std::os::raw::c_char,
                          parray: *const mxArray) -> ::std::os::raw::c_int;
    pub fn mexGetVariablePtr(workspace: *const ::std::os::raw::c_char,
                             name: *const ::std::os::raw::c_char)
     -> *const mxArray;
    pub fn mexGetVariableWithObject(workspace: *const ::std::os::raw::c_char,
                                    name: *const ::std::os::raw::c_char)
     -> *mut mxArray;
    pub fn mexLock();
    pub fn mexUnlock();
    pub fn mexIsLocked() -> bool_;
    pub fn mexFunctionName() -> *const ::std::os::raw::c_char;
    pub fn mexEvalString(str: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn mexEvalStringWithTrap(str: *const ::std::os::raw::c_char)
     -> *mut mxArray;
    pub fn mexAtExit(exit_fcn: mex_exit_fn) -> ::std::os::raw::c_int;
}
